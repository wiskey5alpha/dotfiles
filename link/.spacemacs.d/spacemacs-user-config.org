#+TITLE: Spacemacs User Configuration File
#+STARTUP: hidestars
#+FILETAGS: spacemacs config

* Header for resulting .el file
  #+BEGIN_SRC emacs-lisp
  ;; This file is automatically generated from spacemacs-user-config.org
  ;; any changes made here will be over written upon next startup.
  #+END_SRC
* powerline
  #+BEGIN_SRC emacs-lisp
  (setq powerline-default-separator 'contour)
  #+END_SRC
* deft
  #+BEGIN_SRC emacs-lisp
  (setq deft-use-filename-as-title t)
  ;; with this tell deft to use the search
  ;; term as the filename if a new file is created
  (setq deft-use-filter-string-for-filename t)
  (setq deft-file-naming-rules
        '((noslash . "-")
          (nospace . "-")
          (case-fn . downcase)))
  (setq deft-text-mode 'org-mode)
  (setq deft-org-mode-title-prefix t)
  (setq deft-directory "~/org/notes")
  (setq deft-archive-directory "../.archive/")
  (setq deft-extensions '("org"))
  (setq deft-default-extension "org")
  (setq deft-auto-save-interval 30)
  #+END_SRC
* org-mode
** org modules and exporters
   Org mode is a system with many add-ons and features.  The Export function has
   many more options than what is set as default
   #+BEGIN_SRC emacs-lisp
     (setq org-export-backends
     '(ascii
       beamer
       html
       icalendar
       latex
       md
       odt
       org
       taskjuggler
       )
       )
   #+END_SRC
   Set up color source code blocks in latex
   #+BEGIN_SRC emacs-lisp
     (require 'ox-latex)
     (add-to-list 'org-latex-packages-alist '("" "minted"))
     (setq org-export-latex-listings 'minted)
     (setq org-src-fontify-natively t)
   #+END_SRC
** org mode hooks
   things to enable based on the file type
   #+BEGIN_SRC emacs-lisp
   (add-hook 'org-mode-hook 'turn-on-auto-fill)
   (add-hook 'org-mode-hook 'flyspell-mode)
   (add-hook 'org-mode-hook (lambda () (hl-todo-mode -1) nil))
   #+END_SRC
** org todo
   #+BEGIN_SRC emacs-lisp
   (setq org-todo-keywords '(
           (sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
   ))
   (setq org-todo-keyword-faces (quote (
                         ("TODO" :foreground "brown"      :weight bold)
                         ("NEXT" :foreground "tomato"     :weight bold)
                         ("DONE" :foreground "olive drab" :weight bold)
   )))
   #+END_SRC
   Ensure that TODOs don't get marked as DONE while child items are open even if
   its checkboxes
   #+BEGIN_SRC emacs-lisp
     (setq org-enforce-todo-dependencies t)
     (setq org-enforce-todo-checkbox-dependencies t)
     (setq org-agenda-dim-blocked-tasks nil)
   #+END_SRC
** org habits
   #+BEGIN_SRC emacs-lisp
   (setq org-habit-show-habits-only-for-today nil)
   #+END_SRC
** org effort estimates
   By assigning effort to tasks, i am able to filter out tasks that i dont have
   time to complete right now
   #+begin_src emacs-lisp
     (setq org-global-properties
           (quote (
                   ("Effort_ALL" . "0:15 0:30 1:00 2:00 4:00 1d 5d")
                   )))
   #+end_src
** org stuck-projects
   first, a project is loosely defined as an item that is:
   - A TODO item
   - not on the "someday maybe" list
   - not waiting for something else
   - not explicitly set to ignore
   - not in review
   - not scheduled
   Next
   - if it has a TODO item its not stuck (the lower one may be though)
   - if it has a NEXT item its not stuck
   #+BEGIN_SRC emacs-lisp
   (setq org-stuck-projects
   '(
      ;; the tags-todo search that identifies projects
      "-someday-wait-IGNORE-REVIEW/TODO"
      ;; if these TODO words are found, it is not stuck
      ("NEXT")
      ;; if these tags are found in the subitems, it is not stuck
      nil
      ;; a regular expression that matches non stuck
      ""
     )
    )
   #+END_SRC
** org tags
   Tags are used for two major functions; filtering and searching
   #+BEGIN_SRC emacs-lisp
   (with-eval-after-load 'org
   ;; Replace org-set-tags with org-set-tags-command in keybinding
   (spacemacs/set-leader-keys-for-major-mode 'org-mode ":" 'org-set-tags-command)
   )
   (setq org-tags-column -120)

   (setq org-tag-alist '(
    ;;   Next Action Contexts
         ("comms"    .   ?c)
         ("web"      .   ?w)
         ("cac"      .   ?a)
         ("office"   .   ?o)
         ("home"     .   ?h)
         ("mcen"     .   ?m)
         ("vault"    .   ?v)
         ("imefdm"   .   ?i)
    ;;   Meetings and People
         ("staff"    .   ?t)
         ("spe"      .   ?P)
         ("col"      .   ?C)
    ;;   Categories and flags
         ("someday"  .   ?s)
         ("wait"     .   ?W)
         ("read"     .   ?r)
         ("fifo"     .   ?f)
         ("journal"  .   ?j)
         ("REVIEW"   .   ?R)
         ("pp"       .   ?p)
         ))

     (setq org-tags-exclude-from-inheritance '(
         "read"
         "REVIEW"
         "wait"
         "fifo"
         "journal"
         "pp"
         ))


   #+END_SRC
** org clock
   #+BEGIN_SRC emacs-lisp
   (org-clock-persistence-insinuate)
   ;; the number of clock tasks to remember in history
   (setq org-clock-history-length 36)
   ;;  resume clock when clocking into task with open clock.
   ;; When clocking into a task with a clock entry which has not been closed,
   ;; the clock can be resumed from that point
   (setq org-clock-in-resume t)
   ;; when set to t , both the running clock and entire history are saved when
   ;; emacs closes and resume when emacs restarts
   (setq org-clock-persist t)
   ;; put clock times into LOGBOOK drawer
   (setq org-clock-into-drawer t)
   ;; clock out when the task is marked DONE
   (setq org-clock-out-when-done t)
   ;; set the mode line clock display
   (setq mode-line-org-clock t)
   #+END_SRC
** org protocol
   Almost the best feature of org mode.  Enabling org-protocol lets me send
   clips to org from the browser
  #+BEGIN_SRC emacs-lisp
    (require 'org-protocol)
 #+END_SRC
** Agenda files
   list of agenda files managed in the org directory.

   This will load all org files in the org directory
   into two lists :
   - First are the files required for the org-agenda
     - this should be =org-agenda-files=
   - The second is the directories used for search such as org-occur
     - this should be =org-agenda-text-search-extra-files=

   Next , because org only makes refile-targets from the
   =org-agenda-files= list we need to adjust that to include
   the Reference folder as well
   #+BEGIN_SRC emacs-lisp
     ; set the default directory for some org functionality
     (setq org-directory "~/org")
     (setq org-agenda-files (file-expand-wildcards "~/org/*.org"))
     (setq org-agenda-text-search-extra-files (file-expand-wildcards "~/org/notes/*.org"))
     (setq tra:all-org-files ( append
           org-agenda-files
           org-agenda-text-search-extra-files)
     )
   #+END_SRC
   I want to be able to reload the list of refile targets if i add files
   #+BEGIN_SRC emacs-lisp
     (defun rebuild-agenda-files ()
         (interactive)
         (setq org-agenda-files (file-expand-wildcards "~/org/*.org"))
         (setq org-agenda-text-search-extra-files (file-expand-wildcards "~/org/notes/*.org"))
         (setq tra:all-org-files ( append
               org-agenda-files
               org-agenda-text-search-extra-files)
               )
     )
   #+END_SRC

** Refile targets
   #+BEGIN_SRC emacs-lisp
   (setq org-refile-targets
       (quote ((nil :maxlevel . 5)
           (tra:all-org-files :maxlevel . 5)
       ))
   )
   (setq org-refile-use-outline-path 'file)
   (setq org-outline-path-complete-in-steps nil)
   (setq org-refile-allow-creating-parent-nodes 'confirm)
   (setq org-completion-use-ido t)
   #+END_SRC

** Agenda views
   #+BEGIN_SRC emacs-lisp
     (setq org-agenda-skip-scheduled-if-done 't)
     (setq org-log-into-drawer 't)
     (setq org-agenda-leading-zero 't)
     (setq org-agenda-custom-commands '())
     (setq org-tags-list-match-sublevels 'indented)
   #+END_SRC

   A stuck project is:
   - a TODO that has no NEXT or TODOs
   - is not scheduled for later
   - not tagged with one of the ignored tags
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'org-agenda-custom-commands
        '("K" "Stuck Projects"
             ((org-ql-block '(and
                             (todo "TODO")
                             (not (tags "wait" "someday" "calendar"))
                             (not (scheduled))
                             (children ( todo "DONE"))
                             (not (children (todo "NEXT")))
                             (not (children (todo "TODO")))
                             (not (children (scheduled)))
                            )
                           ((org-ql-block-header "Potential close - A TODO with only DONE tasks"))
                           )
               (org-ql-block '(and
                               (todo "TODO")
                               (not (tags "wait" "someday" "calendar"))
                               (not (scheduled))
                               (or
                                (children (todo "TODO"))
                                (children (todo "DONE"))
                               )
                               (not (descendants (todo "NEXT")))
                               (not (children (scheduled)))
                              )
                             ((org-ql-block-header "Needs Actions Defined - A TODO with only TODO or DONE tasks"))
                             )
               (org-ql-block '(and
                               (todo "DONE")
                               (not (tags "wait" "someday" "calendar"))
                               (not (scheduled))
                               (or
                                (children (todo "TODO"))
                                (children (todo "NEXT"))
                                )
                               (not (children (scheduled)))
                               )
                             ((org-ql-block-header "Missed Actions - A DONE with active TODO or NEXT"))
                             )
              (org-ql-block '(and
                               (todo "NEXT")
                               (not (tags "wait" "someday" "calendar"))
                               (not (scheduled))
                               (children (todo))
                              )
                             ((org-ql-block-header "Mislabled Actions - A NEXT with children"))
                             )
                )
            )
            )
   #+END_SRC


   The gtd project list.  Any TODO that has NEXT actions assigned to it
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'org-agenda-custom-commands
        '("p" "The Project List"
             ((org-ql-block '(and
                               (todo "TODO")
                               (not (tags "wait" "someday"))
                               (not (scheduled))
                               (children (todo "NEXT"))
                               )
                             ((org-ql-block-header "The Project List"))
                )
              )
             (
              (org-agenda-with-colors t)
              (org-agenda-remove-tags t)
              (ps-print-color-p 'black-white)
              (ps-paper-type 'letter)
              (ps-top-margin 3)
              (ps-bottom-margin 3)
              (ps-left-margin 3)
              (ps-right-margin 3)
              (ps-font-size 8.0)
              (ps-print-header nil)
              (ps-landscape-mode t)
              (ps-number-of-columns 2)
              )
             ( "~/paperPlanner/Agenda-Export/Page-03.TheProjectList.txt"
               "~/paperPlanner/Agenda-Export/Page-03.TheProjectList.ps")
              )
        )
    #+END_SRC

   This is an individual project 'vertical' view.  Meaning, it will run down all
   of the TODO, NEXT and DONE vertically, and print them hierarchically.  This is how we
   can print out one project per report/file.
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'org-agenda-custom-commands
             '("v" "Vertical view of a project"
               ((tags-todo "-someday-WAIT/!")
                  )
                 (
                  (org-agenda-with-colors t)
                  (org-tags-match-list-sublevels 'indented)
                  )
                 ("~/paperPlanner/Agenda-Export/Page-04.Vertical-ProjectView.ps")
                 )
             )
   #+END_SRC
   Next Actions, all contexts in one long list, un-categorized at the bottom
   #+BEGIN_SRC emacs-lisp
      (add-to-list 'org-agenda-custom-commands
         '("Na" "Next Actions"
              ((org-ql-block '(and
                               (todo "NEXT")
                               (tags "comms")
                               (not (tags "wait" "someday"))
                               (not (scheduled))
                               )
                             ((org-ql-block-header "Communications"))
                             )
               (org-ql-block '(and
                               (todo "NEXT")
                               (tags "web")
                               (not (tags "wait" "someday"))
                               (not (scheduled))
                               )
                             ((org-ql-block-header "Web"))
                             )
                (org-ql-block '(and
                               (todo "NEXT")
                               (tags "cac")
                               (not (tags "wait" "someday"))
                               (not (scheduled))
                               )
                             ((org-ql-block-header "DoD Websites"))
                             )
               (org-ql-block '(and
                               (todo "NEXT")
                               (tags "imefdm")
                               (not (tags "wait" "someday"))
                               (not (scheduled))
                               )
                             ((org-ql-block-header "Tactical Network"))
                             )
                (org-ql-block '(and
                               (todo "NEXT")
                               (tags "mcen")
                               (not (tags "wait" "someday"))
                               (not (scheduled))
                               )
                             ((org-ql-block-header "MCEN"))
                             )
                 (org-ql-block '(and
                               (todo "NEXT")
                               (tags "laptop")
                               (not (tags "wait" "someday"))
                               (not (scheduled))
                               )
                             ((org-ql-block-header "Laptop (system)"))
                             )
               (org-ql-block '(and
                               (todo "NEXT")
                               (tags "home")
                               (not (tags "wait" "someday"))
                               (not (scheduled))
                               )
                             ((org-ql-block-header "At Home"))
                             )
                 (org-ql-block '(and
                               (todo "NEXT")
                               (tags "office")
                               (not (tags "wait" "someday"))
                               (not (scheduled))
                               )
                             ((org-ql-block-header "At the Office"))
                             )
              (org-ql-block '(and
                               (todo "NEXT")
                               (tags "spe")
                               (not (tags "wait" "someday"))
                               (not (scheduled))
                               )
                             ((org-ql-block-header "The SPE Roundtable"))
                             )
                 (org-ql-block '(and
                               (todo "NEXT")
                               (not (tags "comm" "web" "cac" "imefdm" "mcen"
                                          "laptop" "spe" "home" "office" "wait" "someday"))
                               (not (scheduled))
                               )
                             ((org-ql-block-header "Uncategorized Next Actions"))
                             )
             )))
   #+END_SRC

   Looking for tasks that could be NEXT actions
   #+BEGIN_SRC emacs-lisp
   (add-to-list 'org-agenda-custom-commands
            '("Np" "Potential Next Actions"
            ((org-ql-block '(and
                             (todo "TODO")
                             (not (tags "someday" "calendar"))
                             (not (scheduled))
                             (not (children (todo)))
                             )
                           ((org-ql-block-header "Potential Next Actions"))
                           )
             )
            ))
   #+END_SRC
   Next actions grouped by Effort
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'org-agenda-custom-commands
        '("Ne" "Next actions by Effort"
                ((org-ql-block '(and
                                 (todo "NEXT")
                                 (not (tags "someday" "calendar"))
                                 (not (scheduled))
                                 (property "Effort" "0:15")
                                 )
                               ((org-ql-block-header "15 Min Next actions"))
                               )

                (org-ql-block '(and
                                 (todo "NEXT")
                                 (not (tags "someday" "calendar"))
                                 (not (scheduled))
                                 (property "Effort" "0:30")
                                 )
                               ((org-ql-block-header "30 Min Next actions"))
                               )
                (org-ql-block '(and
                                 (todo "NEXT")
                                 (not (tags "someday" "calendar"))
                                 (not (scheduled))
                                 (property "Effort" "1:00")
                                 )
                               ((org-ql-block-header "One hour Next actions"))
                               )
                 (org-ql-block '(and
                                 (todo "NEXT")
                                 (not (tags "someday" "calendar"))
                                 (not (scheduled))
                                 (or
                                  (property "Effort" "2:00")
                                  (property "Effort" "4:00")
                                 )
                                )
                               ((org-ql-block-header "Long Next actions"))
                               )
                (org-ql-block '(and
                                 (todo "NEXT")
                                 (not (tags "someday" "calendar"))
                                 (not (scheduled))
                                 (not (property "Effort"))
                                )
                               ((org-ql-block-header "Next actions with no Effort Assigned"))
                               )
                ))
        )
   #+END_SRC
   A column view of NEXT actions in order to set or view effort and clocked time
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'org-agenda-custom-commands
        '("Nt" "Time Management"
            ((org-ql-block '(and
                               (todo "NEXT")
                               (not (tags "someday" "calendar"))
                               (not (scheduled))
                               (not (children (todo)))
                               )
                             ((org-ql-block-header "Time Management"))
                             )
               )
            ((org-agenda-overriding-columns-format "%5TODO %4Effort %4Clocksum %70ITEM(Next Action) %10TAGS")
            (org-agenda-view-columns-initially t))
            ))
   #+END_SRC

   The gtd waiting for list
   #+BEGIN_SRC emacs-lisp
   (add-to-list 'org-agenda-custom-commands
      '("w" "Waiting For"
          ((org-ql-block '(and
                             (tags "wait")
                             (not (tags "someday"))
                             (not (scheduled))
                             )
                           ((org-ql-block-header "Waiting For"))
                           )
             )
            ))
   #+END_SRC

   Anything that i've tagged to review
   #+BEGIN_SRC emacs-lisp
   (add-to-list 'org-agenda-custom-commands
      '("Rb" "Brief Review"
          ((org-ql-block '(and
                             (tags "REVIEW")
                             )
                           )
             )
            )
           )
   #+END_SRC
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'org-agenda-custom-commands
        '("Rd" "Detailed Review"
          ((org-ql-block '(and
                               (todo)
                               (not (tags "someday"))
                               (not (scheduled))
                               (tags "REVIEW")
                               )
                         ((org-ql-block-header "Tasks marked for Review"))
                         )
           (org-ql-block '(and
                           (not (todo))
                           (not (todo "DONE"))
                           (not (tags "someday"))
                           (not (scheduled))
                           (tags "REVIEW")
                           )
                         ((org-ql-block-header "Items marked for Review"))
                         )
          (org-ql-block '(deadline :from today :to 7)
                         ((org-ql-block-header "Upcoming deadlines this week"))
                         )

          (org-ql-block '(scheduled :from today :to 7)
                         ((org-ql-block-header "Tasks scheduled for this week"))
                         )

           (org-ql-block '(clocked :from -7)
                         ((org-ql-block-header "Tasks worked on last week"))
                         )
               )
              )
             )
   #+END_SRC
   An agenda view that looks for entries that have not yet been marked as synced
   using the tag 'pp' to denote "paper planner"
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'org-agenda-custom-commands
                  '("Rs" "Items that need to be synced with paper"
                    ((org-ql-block '(and
                                     (todo "TODO")
                                     (children (todo "NEXT"))
                                     (not (tags "pp" "someday"))
                                     )
                                   ((org-ql-block-header "Project List Items"))
                                   )
                     (org-ql-block '(and
                                     (todo "NEXT")
                                     (not (tags "pp" "someday"))
                                     )
                                   ((org-ql-block-header "Next Actions"))
                                   )
                     (org-ql-block '(and
                                     (or
                                      (scheduled :from today :to 7)
                                      (deadline :from today :to 7)
                                      (ts-active :from today :to 28)
                                     )
                                     (not (tags "pp"))
                                     )
                                   ((org-ql-block-header "calendar items"))
                                   )
                     )
                    )
                  )
   #+END_SRC
   I want the agenda to show the time grid for the whole day, not just a
   condensed 'agenda' view
   #+BEGIN_SRC emacs-lisp
     (setq org-agenda-time-grid (quote
     ((daily today remove-match)
      (0600 0630 0700 0730 0800 0830 0900 0930 1000 1030
       1100 1130 1200 1230 1300 1330 1400 1430 1500 1530
       1600 1630 1700 1730 1800 1830 1900 1930 2000 2030)
      "......" "----------------")))
   #+END_SRC
** Agenda timeline
   I really like this view, but I dont think I want it in _every_ printout and
   agenda.  I only want it on the daily agenda view.
   #+BEGIN_SRC emacs-lisp
     (require 'org-timeline)
     (add-hook 'org-agenda-finalize-hook
         (lambda () (if (= org-agenda-type 'agenda) (org-timeline-insert-timeline :append))))
   #+END_SRC
** archive settings
   I organized all of the archived org items under a date tree, but
   preserve the original file name.  This marks things as done as they are
   archived if not already.
   #+BEGIN_SRC emacs-lisp
   (setq org-archive-location "~/org/.archive/%s_archive::datetree/")
   (setq org-archive-save-context-info '(time file olpath category todo itags))
   (setq org-archive-mark-done t)
   #+END_SRC
** Publish projects
   Setup the initial alist so that downstream SRC blocks can add to
   #+BEGIN_SRC emacs-lisp
   (setq org-publish-project-alist '())
   #+END_SRC

   org-info is a javascript "plugin" for html exported org files that adds
   several "nice" features for navigating
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'org-publish-project-alist
                  '("org-info"
                    :base-directory "/home/aldrichtr/org/org-info/"
                    :base-extension "js"
                    :publishing-directory "/var/www/www.timforge.local/htdocs/styles"
                    :publishing-function org-publish-attachment
                    )
                  )
   #+END_SRC

   Any style sheets that I've created
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'org-publish-project-alist
                  '("styles"
                   :base-directory "/home/aldrichtr/org/styles/"
                   :base-extension "css"
                   :publishing-directory "/var/www/www.timforge.local/htdocs/styles"
                   :publishing-function org-publish-attachment
                   )
                  )
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'org-publish-project-alist
                  '("org files"
                    :base-directory "/home/aldrichtr/org/"
                    :base-extension "org"
                    :publishing-directory "/var/www/www.timforge.local/htdocs"
                    :recursive t
                    :makeindex t
                    :auto-sitemap t
                    :sitemap-filename "default.org"
                    :publishing-function org-html-publish-to-html
                    )
                  )
   #+END_SRC

** capture templates
   #+BEGIN_SRC emacs-lisp
              (setq org-capture-templates
                 '(
                   ("a" "Appointment" entry
                    (file+headline "~/org/calendar.org" "Appointments")
                    "* %?\n  %T")
                   ("o" "Note" entry
                    (file "~/org/review.org" )
                    "* %? "
                    :kill-buffer t)
                   ("j" "Journal entry" entry
                    (file "~/org/journal.org" )
                    "* %<%Y-%m-%d> %? :journal:REVIEW: \n %u"
                    :prepend t :clock-in t :clock-resume t)
                   ;;; When typing 'w' in firefox
                   ;;; |%:description | %^{TITLE} | title of the web-page |
                   ;;; |%:link        | %c        | URL                   |
                   ;;; |%:initial     | %i        | selected text         |
                   ("w" "Web clipping" entry
                    (file "~/org/review.org" )
                    "* %:description%? :web:\n  %:initial\n  Source :\n %:link"
                    :immediate-finish t
                    )
                   ("W" "capture web clip with note" entry
                    (file "~/org/review.org" )
                    "* %:description%? :web:\n  %:initial\n  Source :\n %:link"
                    )
                   ( "t" "Add a todo item and close" entry
                     (file "~/org/review.org")
                     "* TODO %i\n  %U\n"
                     :immediate-finish t
                     :kill-buffer t)
                   ( "T" "Add ticket to database (with link)" entry
                     (file+headline "~/org/tickets.org" "Backlog")
                     "* NEW %?\n%u\n\n  Source :\n %F:%(with-current-buffer
                       (org-capture-get :original-buffer)
                       (number-to-string (line-number-at-pos)))"
                     :prepend t )
                   )
                 )
   #+END_SRC
** Turn on alerts based on the agenda schedule
   #+BEGIN_SRC emacs-lisp
   ;; the appointment notification facility
   (setq
     appt-message-warning-time 15 ;; warn 15 min in advance
     appt-display-mode-line t     ;; show in the modeline
     appt-display-format 'window) ;; use our func
   (appt-activate 1)              ;; active appt (appointment notification)
   (display-time)                 ;; time display is required for this...

   ;; update appt:
   ;; - when starting emacs
   (org-agenda-to-appt)
   ;; - each time agenda opened
   (add-hook 'org-finalize-agenda-hook 'org-agenda-to-appt)
   ;;
   (run-at-time "12:05am" (* 24 3600) 'org-agenda-to-appt)
   #+END_SRC
   #+BEGIN_SRC emacs-lisp
     (require 'org-alert)
     (setq alert-default-style 'libnotify)
     (org-alert-enable)
   #+END_SRC
** Export to task juggler
   #+BEGIN_SRC emacs-lisp
     (require 'ox-taskjuggler)
     (setq org-taskjuggler-project-tag "tjp")
     (setq org-taskjuggler-reports-directory "~/org/reports")
   #+END_SRC

   #+RESULTS:
   : ~/org/reports

   Modify the default report to provide a more reasonable report.
   #+BEGIN_SRC emacs-lisp
   (setq org-taskjuggler-default-project-duration 980)
   (setq org-taskjuggler-default-reports
     '("textreport report \"Plan\" {
     formats html
     header '== <-query attribute=\"name\"-> =='

     center -8<-
       [#Plan Plan] | [#Resource_Allocation Resource Allocation]
       ----
       === Plan ===
       <[report id=\"plan\"]>
       ----
       === Resource Allocation ===
       <[report id=\"resourceGraph\"]>
     ->8-
   }

   # A traditional Gantt chart with a project overview.
   taskreport plan \"\" {
     headline \"Project Plan\"
     columns bsi, name, complete, start, end, effort, chart
   # rollup completed tasks
   #  rolluptask plan.end < ${now}
     loadunit shortauto
     hideresource 1
   }

   # A graph showing resource allocation. It identifies whether each
   # resource is under- or over-allocated for.
   resourcereport resourceGraph \"\" {
     headline \"Resource Allocation Graph\"
     columns no, name, effort, weekly
     loadunit shortauto
     hidetask ~(isleaf() & isleaf_())
     sorttasks plan.start.up
   }"))

   #+END_SRC


** auto-saving
   I want all org files to be saved, both as part of autosave, and also
   following a refile, or capture
   #+BEGIN_SRC emacs-lisp
   (add-hook 'auto-save-hook 'org-save-all-org-buffers)
   #+END_SRC
** elgantt
   this is an external git repo with a very interesting tool.  Its an
   interactive gantt view of your agenda
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'load-path "~/.spacemacs.d/external/elgantt/")
     (require 'elgantt)
     (setq elgantt-timestamps-to-display '(deadline timestamp scheduled timestamp-range))
     (setq elgantt-draw-overarching-headers 't)
   #+END_SRC
* calfw
  #+BEGIN_SRC emacs-lisp
  (require 'calfw)
  (require 'calfw-org)
  (setq calendar-week-start-day 1) ;; monday
  #+END_SRC
* cc-mode
  the following section sets up my preferred formatting style

  #+BEGIN_SRC emacs-lisp
  (setq c-basic-offset 4)
  (defconst my-c-style
    '((c-tab-always-indent        . t)
      (c-comment-only-line-offset . 0)
      (c-hanging-braces-alist     . ((substatement-open after)
                                     (brace-list-open)))
      (c-hanging-colons-alist     . ((member-init-intro before)
                                     (inher-intro)
                                     (case-label after)
                                     (label after)
                                     (access-label after)))
      (c-cleanup-list             . (scope-operator
                                     empty-defun-braces
                                     defun-close-semi))
      (c-offsets-alist            . ((arglist-close . c-lineup-arglist)
                                     (substatement-open . 0)
                                     (case-label        . 4)
                                     (block-open        . 0)
                                     (namespace-open    . 0)
                                     (innamespace       . 0)
                                     (knr-argdecl-intro . -)))
      (c-echo-syntactic-information-p . t)
      )
      "My C Programming Style")

   ;; offset customizations not in my-c-style
   (setq c-offsets-alist '((member-init-intro . ++)))

   ;; Customizations for all modes in CC Mode.
   (defun my-c-mode-common-hook ()
    ;; add my personal style and set it for the current buffer
    (c-add-style "PERSONAL" my-c-style t)
    ;; other customizations
    (setq tab-width 4
          ;; this will make sure spaces are used instead of tabs
          indent-tabs-mode nil)
    ;; we like auto-newline and hungry-delete
      (c-toggle-auto-hungry-state 1)
    )
  (add-hook 'c-mode-common-hook 'my-c-mode-common-hook)
  (add-hook 'c++-mode-hook 'my-c-mode-common-hook)
  #+END_SRC
* Plantuml
  plantuml is a java applet that can convert text into a UML diagram
  #+BEGIN_SRC emacs-lisp
  (setq org-plantuml-jar-path "/usr/share/plantuml/plantuml.jar")
  #+END_SRC

* Remind files
  a syntax highlighting library for remind files
  #+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.spacemacs.d/external/remind-mode.el")
  (add-to-list 'auto-mode-alist '("\\.rem\\'" . remind-mode))
  #+END_SRC
* Exec path from shell
  the -i argument causes an error on startup because i use .bashrc instead of
  .profile for configuring my shell
  #+BEGIN_SRC emacs-lisp
  (setq exec-path-from-shell-arguments '("-l"))
  #+END_SRC
