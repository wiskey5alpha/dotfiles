#+TITLE: Spacemacs User Configuration File
#+STARTUP: hidestars
#+FILETAGS: spacemacs config

* powerline
  #+BEGIN_SRC emacs-lisp
  (setq powerline-default-separator 'alternate)
  #+END_SRC
* deft
  #+BEGIN_SRC emacs-lisp
  (setq deft-use-filename-as-title t)
  ;; with this tell deft to use the search
  ;; term as the filename if a new file is created
  (setq deft-use-filter-string-for-filename t)
  (setq deft-file-naming-rules
        '((noslash . "-")
          (nospace . "-")
          (case-fn . downcase)))
  (setq deft-text-mode 'org-mode)
  (setq deft-org-mode-title-prefix t)
  (setq deft-directory "~/org/notes")
  (setq deft-archive-directory "../.archive/")
  (setq deft-extensions '("org"))
  (setq deft-default-extension "org")
  (setq deft-auto-save-interval 30)
  #+END_SRC
* org-mode
** preamble
   Because org-mode is bundled with emacs and spacemacs also maintains a
   version, we need to add an eval so that we use the spacemacs package
   #+BEGIN_SRC emacs-lisp
   ;;(with-eval-after-load 'org
   #+END_SRC
** org mode hooks
   things to enable based on the file type
   #+BEGIN_SRC emacs-lisp
   (add-hook 'org-mode-hook 'turn-on-auto-fill)
   (add-hook 'org-mode-hook 'flyspell-mode)
   (add-hook 'org-mode-hook (lambda () (hl-todo-mode -1) nil))
   #+END_SRC
** org todo
   #+BEGIN_SRC emacs-lisp
   (setq org-todo-keywords '(
           (sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
   ))
   (setq org-todo-keyword-faces (quote (
                         ("TODO" :foreground "brown"      :weight bold)
                         ("NEXT" :foreground "tomato"     :weight bold)
                         ("DONE" :foreground "olive drab" :weight bold)
   )))
   #+END_SRC
** org tags
   Tags are used for two major functions; filtering and searching
   #+BEGIN_SRC emacs-lisp
   (with-eval-after-load 'org
   ;; Replace org-set-tags with org-set-tags-command in keybinding
   (spacemacs/set-leader-keys-for-major-mode 'org-mode ":" 'org-set-tags-command)
   )
   (setq org-tags-column -120)

   (setq org-tag-alist '(
    ;;   Next Action Contexts
         ("email"    .   ?m)
         ("phone"    .   ?p)
         ("laptop"   .   ?l)
         ("web"      .   ?w)
         ("cac"      .   ?c)
         ("office"   .   ?o)
         ("home"     .   ?h)
         ("errand"   .   ?e)
         ("vault"    .   ?v)
         ("anywhere" .   ?a)
         ;;   Markers
         ("someday"  .   ?S)
         ("wait"     .   ?W)
         ;;   other categories
         ("support"  .   ?P)
         ("read"     .   ?r)
         ("fifo"     .   ?f)
         ("journal"  .   ?j)
         ("REVIEW"   .   ?R)
         ))

     (setq org-tags-exclude-from-inheritance '(
         "read"
         "REVIEW"
         "someday"
         "wait"
         "fifo"
         ))


   #+END_SRC
** org clock
   #+BEGIN_SRC emacs-lisp
   (org-clock-persistence-insinuate)
   ;; the number of clock tasks to remember in history
   (setq org-clock-history-length 36)
   ;;  resume clock when clocking into task with open clock.
   ;; When clocking into a task with a clock entry which has not been closed,
   ;; the clock can be resumed from that point
   (setq org-clock-in-resume t)
   ;; when set to t , both the running clock and entire history are saved when
   ;; emacs closes and resume when emacs restarts
   (setq org-clock-persist t)
   ;; put clock times into LOGBOOK drawer
   (setq org-clock-into-drawer t)
   ;; clock out when the task is marked DONE
   (setq org-clock-out-when-done t)
   #+END_SRC
** org protocol
   Almost the best feature of org mode.  Enabling org-protocol lets me send
   clips to org from the browser
  #+BEGIN_SRC emacs-lisp
    ;;;; http://stackoverflow.com/questions/23517372/hook-or-advice-when-aborting-org-capture-before-template-selection

    (defadvice org-capture
        (after make-full-window-frame activate)
      "Advise capture to be the only window when used as a popup"
      (if (equal "emacs-capture" (frame-parameter nil 'name))
          (delete-other-windows)))

    (defadvice org-capture-finalize
        (after delete-capture-frame activate)
      "Advise capture-finalize to close the frame"
      (if (equal "emacs-capture" (frame-parameter nil 'name))
          (delete-frame)))
  #+END_SRC
** Agenda files
   list of agenda files managed in the org directory.

   This will load all org files in the org directory
   into two lists :
   - First are the files required for the org-agenda
     - this should be =org-agenda-files=
   - The second is the directories used for search such as org-occur
     - this should be =org-agenda-text-search-extra-files=

   Next , because org only makes refile-targets from the
   =org-agenda-files= list we need to adjust that to include
   the Reference folder as well
   #+BEGIN_SRC emacs-lisp
   ; set the default directory for some org functionality
   (setq org-directory "~/org")
   (setq org-agenda-files (file-expand-wildcards "~/org/*.org"))
   (setq org-refile-allow-creating-parent-nodes 'confirm)


   (defun rebuild-agenda-files ()
     (interactive)
     (load-library "find-lisp")
     (setq org-agenda-files (directory-files "~/org" t "\.org$"))
     (setq org-agenda-text-search-extra-files
           (append
            (find-lisp-find-files "~/org/notes"     "\.org$")
            )
           )
     (setq tra:all-org-files
           (append
            org-agenda-files
            org-agenda-text-search-extra-files)
           )
     (setq org-refile-targets
           (quote ((nil :maxlevel . 5)
                   (tra:all-org-files :maxlevel . 5)
           ))
     )
   )
   (rebuild-agenda-files)
   #+END_SRC
** Agenda views
*** Views preamble
    #+BEGIN_SRC emacs-lisp
    (setq org-agenda-custom-commands
       '(
    #+END_SRC
*** Main Agenda
**** Main agenda preamble
    #+BEGIN_SRC emacs-lisp
    ("A" "@Agenda"
     (
    #+END_SRC
**** Deadlines this week
     #+BEGIN_SRC emacs-lisp
     ( agenda ""
      (
       (org-agenda-overriding-header "Upcoming deadlines this week")
       (org-agenda-ndays 7)
       (org-deadline-warning-days 0)
       (org-agenda-start-on-weekday nil)
       (org-agenda-show-all-dates nil)
       (org-agenda-entry-types '(:deadline))
       (org-agenda-skip-deadline-if-done t)
       (org-agenda-warning-days 0)
      )
     )
     #+END_SRC
**** Scheduled this week
     #+BEGIN_SRC emacs-lisp
     ( agenda ""
      (
       (org-agenda-overriding-header "Items scheduled this week")
       (org-agenda-ndays 7)
       (org-agenda-start-on-weekday nil)
       (org-agenda-show-all-dates nil)
       (org-agenda-entry-types '(:scheduled))
       (org-habit-show-habits-only-for-today nil)
      )
     )
     #+END_SRC
**** 1 Week Overview
     #+BEGIN_SRC emacs-lisp
     ( agenda ""
      (
       (org-agenda-overriding-header "One week overview")
       (org-agenda-ndays 7)
       (org-agenda-start-on-weekday nil)
       (org-agenda-repeating-timestamp-show-all t)
       (org-agenda-entry-types '(:deadline :scheduled :timestamp :sexp))
       (org-deadline-warning-days 0)
      )
     )
     #+END_SRC
**** Close Main Agenda
     #+BEGIN_SRC emacs-lisp
     )
     #+END_SRC
**** Setup for printing
     #+BEGIN_SRC emacs-lisp
     (
      (org-agenda-with-colors t)
      (ps-print-color-p 'black-white)
     )
      ("~/paperPlanner/Agenda-Export/Page-01.CalendarForOneWeek.ps")
**** main agenda postfix
     #+BEGIN_SRC emacs-lisp
     )
     )
     #+END_SRC
*** Next action lists
**** Next Action list preamble
     #+BEGIN_SRC emacs-lisp
          ("N" . "Next Action Lists")
     #+END_SRC
**** By effort
     #+BEGIN_SRC emacs-lisp
     ("Ne" "@Next Actions By Effort"
      (
       (tags-todo "+Effort>=\"0:01\"+Effort<=\"0:15\"/NEXT"
        (
         (org-agenda-overriding-header "15 minutes or less")
         (org-agenda-tags-todo-honor-ignore-options t)
         (org-agenda-todo-ignore-scheduled '(future))
        )
       )
       ( tags-todo "+Effort>\"0:15\"+Effort<=\"0:30\"/NEXT"
        (
         (org-agenda-overriding-header "30 minutes or less")
         (org-agenda-tags-todo-honor-ignore-options t)
         (org-agenda-todo-ignore-scheduled '(future))
        )
       )
       ( tags-todo "+Effort>\"0:30\"/NEXT"
        (
         (org-agenda-overriding-header "over 30 minutes")
         (org-agenda-tags-todo-honor-ignore-options t)
         (org-agenda-todo-ignore-scheduled '(future))
        )
       )
       (
        (org-agenda-with-colors t)
        (ps-print-color-p 'black-white)
       )
       ("~/paperPlanner/Agenda-Export/Page-02.AllNextActions.ps")
      )
     )
      #+END_SRC
**** By Context
     #+BEGIN_SRC emacs-lisp
     ("Nn" "@Next Actions by context"
      (
       (tags-todo "+errand-someday/NEXT"
        (
         (org-agenda-overriding-header "@Errand")
         (org-agenda-tags-todo-honor-ignore-options t)
         (org-agenda-todo-ignore-scheduled '(future))
        )
       )
       (tags-todo "+email-someday/NEXT"
        (
         (org-agenda-overriding-header "@EMail")
         (org-agenda-tags-todo-honor-ignore-options t)
         (org-agenda-todo-ignore-scheduled '(future))
        )
       )
       (tags-todo "+phone-someday/NEXT"
        (
         (org-agenda-overriding-header "@Phone")
         (org-agenda-tags-todo-honor-ignore-options t)
         (org-agenda-todo-ignore-scheduled '(future))
        )
       )
       (tags-todo "+web-someday/NEXT"
        (
         (org-agenda-overriding-header "@Online")
         (org-agenda-tags-todo-honor-ignore-options t)
         (org-agenda-todo-ignore-scheduled '(future))
        )
       )
       (tags-todo "+cac-someday/NEXT"
        (
         (org-agenda-overriding-header "@PKI")
         (org-agenda-tags-todo-honor-ignore-options t)
         (org-agenda-todo-ignore-scheduled '(future))
        )
       )
       (tags-todo "+office-someday/NEXT"
        (
         (org-agenda-overriding-header "@Office")
         (org-agenda-tags-todo-honor-ignore-options t)
         (org-agenda-todo-ignore-scheduled '(future))
        )
       )
       (tags-todo "+home-someday/NEXT"
        (
         (org-agenda-overriding-header "@Home")
         (org-agenda-tags-todo-honor-ignore-options t)
         (org-agenda-todo-ignore-scheduled '(future))
        )
       )
       (tags-todo "+laptop-someday/NEXT"
        (
         (org-agenda-overriding-header "@Laptop")
         (org-agenda-tags-todo-honor-ignore-options t)
         (org-agenda-todo-ignore-scheduled '(future))
        )
       )
       (tags-todo "+anywhere-someday/NEXT"
        (
         (org-agenda-overriding-header "@Anywhere")
         (org-agenda-tags-todo-honor-ignore-options t)
         (org-agenda-todo-ignore-scheduled '(future))
        )
       )
       (tags-todo "+vault-someday/NEXT"
        (
         (org-agenda-overriding-header "@Vault")
         (org-agenda-tags-todo-honor-ignore-options t)
         (org-agenda-todo-ignore-scheduled '(future))
        )
       )
       (tags-todo "-CATEGORY=\"Someday\"-CATEGORY=\"REVIEW\"+TAGS=\"\"/NEXT"
        (
         (org-agenda-overriding-header "@Uncategorized")
         (org-agenda-tags-todo-honor-ignore-options t)
         (org-agenda-todo-ignore-scheduled '(future))
        )
       )
      )
      (
       (org-agenda-with-colors t)
       (ps-print-color-p 'black-white)
      )
      ("~/paperPlanner/Agenda-Export/Page-02.AllNextActions.ps")
     #+END_SRC
**** Next Action postfix
     #+BEGIN_SRC emacs-lisp
     )
     )
     #+END_SRC
*** All uncategorized next actions
     #+BEGIN_SRC emacs-lisp
     ("u" "@Uncategorized Next Actions" tags-todo "-CATEGORY=\"Someday\"-CATEGORY=\"REVIEW\"+TAGS=\"\"/NEXT"
      (
       (org-agenda-overriding-header "@Uncategorized Next Actions")
       (org-agenda-todo-keyword-format "")
       (org-agenda-prefix-format "%b\n%i %-12c:")
       (org-agenda-tags-todo-honor-ignore-options t)
       (org-agenda-todo-ignore-scheduled '(future))
      )
      (
       (org-agenda-with-colors t)
       (ps-print-color-p 'black-white)
      )
      ("~/paperPlanner/Agenda-Export/Page-03.UncategorizedNextActions.ps")
     )
     #+END_SRC
*** Project List
    #+BEGIN_SRC emacs-lisp
    ("p" "@Projects" tags-todo "-IGNORE-someday-wait/TODO"
     (
      (org-agenda-overriding-header "@Projects")
      (org-agenda-tags-todo-honor-ignore-options t)
      (org-tags-match-list-sublevels nil)
      (org-agenda-skip-function 'bh/skip-stuck-projects
     )
    )
    (
     (org-agenda-with-colors t)
     (ps-print-color-p 'black-white)
    )
    ("~/paperPlanner/Agenda-Export/Page-05.ProjectList.ps")
   )
   #+END_SRC
*** Someday-maybe
    #+BEGIN_SRC emacs-lisp
    ("S" "@Someday/Maybe" tags-todo "+someday/TODO"
     (
      (org-agenda-overriding-header "Someday/Maybe")
      (org-agenda-prefix-format " - ")
      (org-agenda-todo-keyword-format "")
     )
     (
      (org-agenda-with-colors t)
      (ps-print-color-p 'black-white)
     )
     ("~/paperPlanner/Agenda-Export/Page-06.SomedayMaybeList.ps")
    )
    #+END_SRC
*** Review
**** Review preamble
    #+BEGIN_SRC emacs-lisp
    ("R" . "@Review Commands")
    #+END_SRC
**** Marked for review
     #+BEGIN_SRC emacs-lisp
     ("Ro" "@Review"
      (
       (tags-todo "REVIEW"
        (
         (org-agenda-skip-function  '(org-agenda-skip-entry-if 'scheduled))
         (org-agenda-overriding-header "Tasks Marked for Review")
         ;don't list sub levels, just the one we marked
         (org-tags-match-list-sublevels nil)
         (org-agenda-sorting-strategy '(category-up))
        )
       )
       (tags "journal+REVIEW"
        (
         (org-agenda-overriding-header "Journal entries marked for Review")
        )
       )
         ;; total hack to exclude all todo's
       (tags "CATEGORY=\"REVIEW\"-TODO={[[:upper:]]+}|REVIEW-journal-TODO={[[:upper:]]+}"
        (
         (org-agenda-overriding-header "Notes Marked for Review")
        )
       )
       (stuck "")
      )
      (
       (org-agenda-with-colors t)
       (ps-print-color-p 'black-white)
      )
      ("~/paperPlanner/Agenda-Export/Page-07.TheReview.ps")
     )
     #+END_SRC
**** Actions that need planning
     #+BEGIN_SRC emacs-lisp
     ("Rp" tags-todo "-someday+Effort=\"\"/NEXT"
      (
       (org-agenda-overriding-header "Actions that need planning")
       (org-agenda-view-columns-initially t)
      )
     )
     #+END_SRC
*** Waiting For
    #+BEGIN_SRC emacs-lisp
    ("w" "@waiting" todo "WAIT"
     (
      (org-agenda-overriding-header "Waiting For")
     )
     (
      (org-agenda-with-colors t)
      (ps-print-color-p 'black-white)
     )
     ("~/paperPlanner/Agenda-Export/Page-08.WaitingFor.ps")
    )
    #+END_SRC
*** Lists
    #+BEGIN_SRC emacs-lisp
    ("l" "@Lists" tags "list"
     (
      (org-agenda-overriding-header "@Lists")
     )
     (
      (org-tags-match-list-sublevels nil)
      (org-agenda-with-colors t)
      (ps-print-color-p 'black-white)
     )
     ("~/paperPlanner/Agenda-Export/Page-09.ListOfLists.ps")
    )
    #+END_SRC
*** The FIFO Queue
    #+BEGIN_SRC emacs-lisp
    ("f" "The FIFO Queue" tags "fifo"
     (
      (org-agenda-overriding-header "The FIFO Queue")
     )
     (
      (org-tags-match-list-sublevels nil)
      (org-agenda-with-colors t)
      (ps-print-color-p 'black-white)
     )
     ("~/paperPlanner/Agenda-Export/Page-09.ListOfLists.ps")
    )
    #+END_SRC
*** Next time im connected
    ("y" "Next time im connected" tags "laptop+web-someday"
     (
      (org-agenda-overriding-header "While Connected")
     )
    )

*** The ticket queue
**** Ticket Queue preamble
    #+BEGIN_SRC emacs-lisp
    ( "k" . "Tickets")
    #+END_SRC
**** Ticket Inbox
     #+BEGIN_SRC emacs-lisp
     ( "ki" "Ticket Inbox" tags "ticket/NEW"
      (
       (org-agenda-files '("~/org/tickets.org"))
       (org-agenda-overriding-header "Ticket Inbox")
      )
     )
     #+END_SRC
**** Ticket work queue
     #+BEGIN_SRC emacs-lisp
     ( "kw" "Ticket work queue" tags "ticket/BUG|TASK|FEAT"
      (
       (org-agenda-files '("~/org/tickets.org"))
       (org-agenda-overriding-header "Ticket work queue")
      )
     )
     #+END_SRC
*** Custom queries
    #+BEGIN_SRC emacs-lisp
    ("Q" . "Custom queries")
     ("Qa" "Archive search" search ""
      (
       (org-agenda-files '(file-expand-wildcards "~/org/.archive/*.org"))
      )
     )
     #+END_SRC
*** Views postfix
    #+BEGIN_SRC emacs-lisp
    ) ;; close inner agenda view group
    ) ;; close setq
    #+END_SRC
** archive settings
   I organized all of the archived org items under a date tree, but
   preserve the original file name
   #+BEGIN_SRC emacs-lisp
   (setq org-archive-location "~/org/.archive/%s_archive::datetree/")
   #+END_SRC
** capture templates
   #+BEGIN_SRC emacs-lisp
   (setq org-capture-templates
      '(
        ("a" "Appointment" entry
         (file+headline "~/org/calendar.org" "Appointments")
         "* %?\n  %T")
        ("o" "Note" entry
         (file "~/org/review.org" )
         "* %? ")
        ("j" "Journal entry" entry
         (file "~/org/journal.org" )
         "* %<%Y-%m-%d> %? :journal:REVIEW: \n %u"
         :prepend t :clock-in t :clock-resume t)
        ;;; When typing 'w' in firefox
        ;;; |%:description | %^{TITLE} | title of the web-page |
        ;;; |%:link        | %c        | URL                   |
        ;;; |%:initial     | %i        | selected text         |
        ("l" "Web clipping" entry
         (file "~/org/review.org" )
         "* %:description%? :web:\n  %:initial\n  Source :\n %:link"
         :immediate-finish t
         )
        ("c" "capture web clip with note" entry
         (file "~/org/review.org" )
         "* %:description%? :web:\n  %:initial\n  Source :\n %:link"
         )
        ( "t" "Add ticket to database" entry
          (file+headline "~/org/tickets.org" "Backlog")
          "* NEW %?\n%u\n" :prepend t )
        ( "T" "Add ticket to database (with link)" entry
          (file+headline "~/org/tickets.org" "Backlog")
          "* NEW %?\n%u\n\n  Source :\n %F:%(with-current-buffer
            (org-capture-get :original-buffer)
            (number-to-string (line-number-at-pos)))"
          :prepend t )
        ("S" "Add a Song to the list" checkitem
         (file+headline "~/org/lists.org" "Music For Purchase")
         "- [ ] %?"
         )
        )
      )
   #+END_SRC
** org-babel
    #+BEGIN_SRC emacs-lisp
      (org-babel-do-load-languages
       'org-babel-load-languages
       '(;; other Babel languages
        (plantuml . t)
        (python . t)
         ))
    #+END_SRC

    Next, enable emacs to find the plantuml jar
    #+BEGIN_SRC emacs-lisp
    (setq plantuml-jar-path "/usr/local/bin/plantuml")
    (setq org-plantuml-jar-path
      (expand-file-name "/usr/local/bin/plantuml"))
    #+END_SRC

** org-refile-targets
   this is the list of files that we can refile a note into
   #+BEGIN_SRC emacs-lisp
   (setq org-completion-use-ido t)
   (setq org-refile-targets
    (quote ((org-agenda-files :maxlevel . 7)
                         (nil :maxlevel . 7))))
   (setq org-refile-use-outline-path (quote file))
   #+END_SRC
** postfix
   Need to close the preamble
   #+BEGIN_SRC emacs-lisp
   ;;)
   #+END_SRC
* user functions
  user function for opening the review file
  #+BEGIN_SRC emacs-lisp
  (defun review ()
    (interactive)
    (find-file "~/org/review.org")
    )
  #+END_SRC
* browser integration
  #+BEGIN_SRC emacs-lisp
  (setq browse-url-browser-function 'browse-url-generic
        browse-url-generic-program "google-chrome")
  #+END_SRC

* trac wiki
  A mode for editing the wiki pages on the trac server
  #+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'tracwiki-mode
  (tracwiki-define-project "ForwardObserver"
                            "http://trac.timforge.net/ForwardObserver" t))
  #+END_SRC
* cc-mode
  the following section sets up my preferred formatting style

  #+BEGIN_SRC emacs-lisp
  (setq c-basic-offset 4)
  (defconst my-c-style
    '((c-tab-always-indent        . t)
      (c-comment-only-line-offset . 0)
      (c-hanging-braces-alist     . ((substatement-open after)
                                     (brace-list-open)))
      (c-hanging-colons-alist     . ((member-init-intro before)
                                     (inher-intro)
                                     (case-label after)
                                     (label after)
                                     (access-label after)))
      (c-cleanup-list             . (scope-operator
                                     empty-defun-braces
                                     defun-close-semi))
      (c-offsets-alist            . ((arglist-close . c-lineup-arglist)
                                     (substatement-open . 0)
                                     (case-label        . 4)
                                     (block-open        . 0)
                                     (namespace-open    . 0)
                                     (innamespace       . 0)
                                     (knr-argdecl-intro . -)))
      (c-echo-syntactic-information-p . t)
      )
      "My C Programming Style")

   ;; offset customizations not in my-c-style
   (setq c-offsets-alist '((member-init-intro . ++)))

   ;; Customizations for all modes in CC Mode.
   (defun my-c-mode-common-hook ()
    ;; add my personal style and set it for the current buffer
    (c-add-style "PERSONAL" my-c-style t)
    ;; other customizations
    (setq tab-width 4
          ;; this will make sure spaces are used instead of tabs
          indent-tabs-mode nil)
    ;; we like auto-newline and hungry-delete
      (c-toggle-auto-hungry-state 1)
    )
  (add-hook 'c-mode-common-hook 'my-c-mode-common-hook)
  (add-hook 'c++-mode-hook 'my-c-mode-common-hook)
  #+END_SRC
