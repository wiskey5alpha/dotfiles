#+TITLE: Spacemacs User Configuration File
#+STARTUP: hidestars
#+FILETAGS: spacemacs config

* Header for resulting .el file
  #+BEGIN_SRC emacs-lisp
  ;; This file is automatically generated from spacemacs-user-config.org
  ;; any changes made here will be over written upon next startup.
  #+END_SRC
* powerline
  #+BEGIN_SRC emacs-lisp
  (setq powerline-default-separator 'alternate)
  #+END_SRC
* deft
  #+BEGIN_SRC emacs-lisp
  (setq deft-use-filename-as-title t)
  ;; with this tell deft to use the search
  ;; term as the filename if a new file is created
  (setq deft-use-filter-string-for-filename t)
  (setq deft-file-naming-rules
        '((noslash . "-")
          (nospace . "-")
          (case-fn . downcase)))
  (setq deft-text-mode 'org-mode)
  (setq deft-org-mode-title-prefix t)
  (setq deft-directory "~/org/notes")
  (setq deft-archive-directory "../.archive/")
  (setq deft-extensions '("org"))
  (setq deft-default-extension "org")
  (setq deft-auto-save-interval 30)
  #+END_SRC
* org-mode
** org mode hooks
   things to enable based on the file type
   #+BEGIN_SRC emacs-lisp
   (add-hook 'org-mode-hook 'turn-on-auto-fill)
   (add-hook 'org-mode-hook 'flyspell-mode)
   (add-hook 'org-mode-hook (lambda () (hl-todo-mode -1) nil))
   #+END_SRC
** org todo
   #+BEGIN_SRC emacs-lisp
   (setq org-todo-keywords '(
           (sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
   ))
   (setq org-todo-keyword-faces (quote (
                         ("TODO" :foreground "brown"      :weight bold)
                         ("NEXT" :foreground "tomato"     :weight bold)
                         ("DONE" :foreground "olive drab" :weight bold)
   )))
   #+END_SRC
   Ensure that TODOs don't get marked as DONE while child items are open even if
   its checkboxes
   #+BEGIN_SRC emacs-lisp
     (setq org-enforce-todo-dependencies t)
     (setq org-enforce-todo-checkbox-dependencies t)
   #+END_SRC
** org habits
   #+BEGIN_SRC emacs-lisp
   (setq org-habit-show-habits-only-for-today nil)
   #+END_SRC
** org effort estimates
   By assigning effort to tasks, i am able to filter out tasks that i dont have
   time to complete right now
   #+begin_src emacs-lisp
     (setq org-global-properties
           (quote (
                   ("Effort_ALL" . "0:15 0:30 1:00 2:00 4:00 1d 5d")
                   )))
   #+end_src
** org stuck-projects
   first, a project is loosely defined as an item that is:
   - A TODO item
   - not on the "someday maybe" list
   - not waiting for something else
   - not explicitly set to ignore
   - not in review
   - not scheduled
   Next
   - if it has a TODO item its not stuck (the lower one may be though)
   - if it has a NEXT item its not stuck
   #+BEGIN_SRC emacs-lisp
   (setq org-stuck-projects
   '(
      ;; the tags-todo search that identifies projects
      "-someday-wait-IGNORE-REVIEW/TODO"
      ;; if these TODO words are found, it is not stuck
      ("NEXT")
      ;; if these tags are found in the subitems, it is not stuck
      nil
      ;; a regular expression that matches non stuck
      ""
     )
    )
   #+END_SRC
** org tags
   Tags are used for two major functions; filtering and searching
   #+BEGIN_SRC emacs-lisp
   (with-eval-after-load 'org
   ;; Replace org-set-tags with org-set-tags-command in keybinding
   (spacemacs/set-leader-keys-for-major-mode 'org-mode ":" 'org-set-tags-command)
   )
   (setq org-tags-column -120)

   (setq org-tag-alist '(
    ;;   Next Action Contexts
         ("comms"    .   ?c)
         ("web"      .   ?w)
         ("cac"      .   ?a)
         ("office"   .   ?o)
         ("home"     .   ?h)
         ("mcen"     .   ?m)
         ("vault"    .   ?v)
         ("imefdm"   .   ?i)
    ;;   Meetings and People
         ("staff"    .   ?t)
         ("spe"      .   ?p)
         ("col"      .   ?C)
    ;;   Categories and flags
         ("someday"  .   ?s)
         ("wait"     .   ?W)
         ("read"     .   ?r)
         ("fifo"     .   ?f)
         ("journal"  .   ?j)
         ("REVIEW"   .   ?R)
         ))

     (setq org-tags-exclude-from-inheritance '(
         "read"
         "REVIEW"
         "someday"
         "wait"
         "fifo"
         "journal"
         ))


   #+END_SRC
** org clock
   #+BEGIN_SRC emacs-lisp
   (org-clock-persistence-insinuate)
   ;; the number of clock tasks to remember in history
   (setq org-clock-history-length 36)
   ;;  resume clock when clocking into task with open clock.
   ;; When clocking into a task with a clock entry which has not been closed,
   ;; the clock can be resumed from that point
   (setq org-clock-in-resume t)
   ;; when set to t , both the running clock and entire history are saved when
   ;; emacs closes and resume when emacs restarts
   (setq org-clock-persist t)
   ;; put clock times into LOGBOOK drawer
   (setq org-clock-into-drawer t)
   ;; clock out when the task is marked DONE
   (setq org-clock-out-when-done t)
   #+END_SRC
** org protocol
   Almost the best feature of org mode.  Enabling org-protocol lets me send
   clips to org from the browser
  #+BEGIN_SRC emacs-lisp
    ;;;; http://stackoverflow.com/questions/23517372/hook-or-advice-when-aborting-org-capture-before-template-selection
    (require 'org-protocol)

    (defadvice org-capture
        (after make-full-window-frame activate)
      "Advise capture to be the only window when used as a popup"
      (if (equal "emacs-capture" (frame-parameter nil 'name))
          (delete-other-windows)))

    (defadvice org-capture-finalize
        (after delete-capture-frame activate)
      "Advise capture-finalize to close the frame"
      (if (equal "emacs-capture" (frame-parameter nil 'name))
          (delete-frame)))
  #+END_SRC
** Agenda files
   list of agenda files managed in the org directory.

   This will load all org files in the org directory
   into two lists :
   - First are the files required for the org-agenda
     - this should be =org-agenda-files=
   - The second is the directories used for search such as org-occur
     - this should be =org-agenda-text-search-extra-files=

   Next , because org only makes refile-targets from the
   =org-agenda-files= list we need to adjust that to include
   the Reference folder as well
   #+BEGIN_SRC emacs-lisp
     ; set the default directory for some org functionality
     (setq org-directory "~/org")
     (setq org-agenda-files (file-expand-wildcards "~/org/*.org"))
     (setq org-agenda-text-search-extra-files (file-expand-wildcards "~/org/notes/*.org"))
     (setq tra:all-org-files ( append
           org-agenda-files
           org-agenda-text-search-extra-files)
     )
   #+END_SRC
   I want to be able to reload the list of refile targets if i add files
   #+BEGIN_SRC emacs-lisp
     (defun rebuild-agenda-files ()
         (interactive)
         (setq org-agenda-files (file-expand-wildcards "~/org/*.org"))
         (setq org-agenda-text-search-extra-files (file-expand-wildcards "~/org/notes/*.org"))
         (setq tra:all-org-files ( append
               org-agenda-files
               org-agenda-text-search-extra-files)
               )
     )
   #+END_SRC

** Refile targets
   #+BEGIN_SRC emacs-lisp
   (setq org-refile-targets
       (quote ((nil :maxlevel . 5)
           (tra:all-org-files :maxlevel . 5)
       ))
   )
   (setq org-refile-use-outline-path 'file)
   (setq org-outline-path-complete-in-steps nil)
   (setq org-refile-allow-creating-parent-nodes 'confirm)
   (setq org-completion-use-ido t)
   #+END_SRC

** Agenda views
   #+BEGIN_SRC emacs-lisp
     (setq org-agenda-skip-scheduled-if-done 't)
     (setq org-log-into-drawer 't)
   #+END_SRC
   #+BEGIN_SRC emacs-lisp
     (setq org-agenda-custom-commands
        '(
           ("s" "Stuck Projects"
            (
             (org-ql-block '(and
                             (todo "TODO")
                             (not (tags "wait" "someday" "calendar"))
                             (not (scheduled))
                             (not (descendants (todo "NEXT")))
                             (not (descendants (todo "TODO")))
                             (not (descendants (scheduled)))
                            )
                           ((org-ql-block-header "Stuck Projects"))
                           )
             )
            )
           ("p" "The Project List"
            (
             (org-ql-block '(and
                             (todo "TODO")
                             (not (tags "wait" "someday"))
                             (not (scheduled))
                             (children (todo "NEXT"))
                             )
                           ((org-ql-block-header "The Project List"))
              )
             )
            )
           ("n" "Next Actions"
            (
             (org-ql-block '(and
                             (todo "NEXT")
                             (tags "comms")
                             (not (tags "wait" "someday"))
                             (not (scheduled))
                             )
                           ((org-ql-block-header "Communications"))
                           )
             (org-ql-block '(and
                             (todo "NEXT")
                             (tags "web")
                             (not (tags "wait" "someday"))
                             (not (scheduled))
                             )
                           ((org-ql-block-header "Web"))
                           )
              (org-ql-block '(and
                             (todo "NEXT")
                             (tags "cac")
                             (not (tags "wait" "someday"))
                             (not (scheduled))
                             )
                           ((org-ql-block-header "DoD Websites"))
                           )
             (org-ql-block '(and
                             (todo "NEXT")
                             (tags "imefdm")
                             (not (tags "wait" "someday"))
                             (not (scheduled))
                             )
                           ((org-ql-block-header "Tactical Network"))
                           )
              (org-ql-block '(and
                             (todo "NEXT")
                             (tags "mcen")
                             (not (tags "wait" "someday"))
                             (not (scheduled))
                             )
                           ((org-ql-block-header "MCEN"))
                           )
               (org-ql-block '(and
                             (todo "NEXT")
                             (tags "laptop")
                             (not (tags "wait" "someday"))
                             (not (scheduled))
                             )
                           ((org-ql-block-header "Laptop (system)"))
                           )
             (org-ql-block '(and
                             (todo "NEXT")
                             (tags "home")
                             (not (tags "wait" "someday"))
                             (not (scheduled))
                             )
                           ((org-ql-block-header "At Home"))
                           )
               (org-ql-block '(and
                             (todo "NEXT")
                             (tags "office")
                             (not (tags "wait" "someday"))
                             (not (scheduled))
                             )
                           ((org-ql-block-header "At the Office"))
                           )
            (org-ql-block '(and
                             (todo "NEXT")
                             (tags "spe")
                             (not (tags "wait" "someday"))
                             (not (scheduled))
                             )
                           ((org-ql-block-header "The SPE Roundtable"))
                           )
               (org-ql-block '(and
                             (todo "NEXT")
                             (not (tags "comm" "web" "cac" "imefdm" "mcen"
                                        "laptop" "spe" "home" "office" "wait" "someday"))
                             (not (scheduled))
                             )
                           ((org-ql-block-header "Uncategorized Next Actions"))
                           )
           ))
           ("w" "Waiting For"
            (
             (org-ql-block '(and
                             (tags "wait")
                             (not (tags "someday"))
                             (not (scheduled))
                             )
                           ((org-ql-block-header "Waiting For"))
                           )
             )
            )
           ("Rb" "Brief Review"
            (
             (org-ql-block '(and
                             (tags "REVIEW")
                             )
                           )
             )
            )
           )
        )
   #+END_SRC
   I want the agenda to show the time grid for the whole day, not just a
   condensed 'agenda' view
   #+BEGIN_SRC emacs-lisp
     (setq org-agenda-time-grid (quote
     ((daily today remove-match)
      (0600 0700 0800 0900 1000
       1100 1200 1300 1400 1500
       1600 1700 1800 1900 2000)
      "......" "----------------")))
   #+END_SRC
** archive settings
   I organized all of the archived org items under a date tree, but
   preserve the original file name
   #+BEGIN_SRC emacs-lisp
   (setq org-archive-location "~/org/.archive/%s_archive::datetree/")
   #+END_SRC
** capture templates
   #+BEGIN_SRC emacs-lisp
   (setq org-capture-templates
      '(
        ("a" "Appointment" entry
         (file+headline "~/org/calendar.org" "Appointments")
         "* %?\n  %T")
        ("o" "Note" entry
         (file "~/org/review.org" )
         "* %? ")
        ("j" "Journal entry" entry
         (file "~/org/journal.org" )
         "* %<%Y-%m-%d> %? :journal:REVIEW: \n %u"
         :prepend t :clock-in t :clock-resume t)
        ;;; When typing 'w' in firefox
        ;;; |%:description | %^{TITLE} | title of the web-page |
        ;;; |%:link        | %c        | URL                   |
        ;;; |%:initial     | %i        | selected text         |
        ("w" "Web clipping" entry
         (file "~/org/review.org" )
         "* %:description%? :web:\n  %:initial\n  Source :\n %:link"
         :immediate-finish t
         )
        ("W" "capture web clip with note" entry
         (file "~/org/review.org" )
         "* %:description%? :web:\n  %:initial\n  Source :\n %:link"
         )
        ( "t" "Add ticket to database" entry
          (file+headline "~/org/tickets.org" "Backlog")
          "* NEW %?\n%u\n" :prepend t )
        ( "T" "Add ticket to database (with link)" entry
          (file+headline "~/org/tickets.org" "Backlog")
          "* NEW %?\n%u\n\n  Source :\n %F:%(with-current-buffer
            (org-capture-get :original-buffer)
            (number-to-string (line-number-at-pos)))"
          :prepend t )
        ("S" "Add a Song to the list" checkitem
         (file+headline "~/org/lists.org" "Music For Purchase")
         "- [ ] %?"
         )
        )
      )
   #+END_SRC
** Turn on alerts based on the agenda schedule
   #+BEGIN_SRC emacs-lisp
     (require 'org-alert)
     (setq alert-default-style 'libnotify)
     (org-agenda-enable)
   #+END_SRC
** Export to task juggler
   #+BEGIN_SRC emacs-lisp
   (require 'ox-taskjuggler)
   #+END_SRC
* user functions
  user function for opening the review file
  #+BEGIN_SRC emacs-lisp
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
  #+END_SRC
* cc-mode
  the following section sets up my preferred formatting style

  #+BEGIN_SRC emacs-lisp
  (setq c-basic-offset 4)
  (defconst my-c-style
    '((c-tab-always-indent        . t)
      (c-comment-only-line-offset . 0)
      (c-hanging-braces-alist     . ((substatement-open after)
                                     (brace-list-open)))
      (c-hanging-colons-alist     . ((member-init-intro before)
                                     (inher-intro)
                                     (case-label after)
                                     (label after)
                                     (access-label after)))
      (c-cleanup-list             . (scope-operator
                                     empty-defun-braces
                                     defun-close-semi))
      (c-offsets-alist            . ((arglist-close . c-lineup-arglist)
                                     (substatement-open . 0)
                                     (case-label        . 4)
                                     (block-open        . 0)
                                     (namespace-open    . 0)
                                     (innamespace       . 0)
                                     (knr-argdecl-intro . -)))
      (c-echo-syntactic-information-p . t)
      )
      "My C Programming Style")

   ;; offset customizations not in my-c-style
   (setq c-offsets-alist '((member-init-intro . ++)))

   ;; Customizations for all modes in CC Mode.
   (defun my-c-mode-common-hook ()
    ;; add my personal style and set it for the current buffer
    (c-add-style "PERSONAL" my-c-style t)
    ;; other customizations
    (setq tab-width 4
          ;; this will make sure spaces are used instead of tabs
          indent-tabs-mode nil)
    ;; we like auto-newline and hungry-delete
      (c-toggle-auto-hungry-state 1)
    )
  (add-hook 'c-mode-common-hook 'my-c-mode-common-hook)
  (add-hook 'c++-mode-hook 'my-c-mode-common-hook)
  #+END_SRC
* Exec path from shell
  the -i argument causes an error on startup because i use .bashrc instead of
  .profile for configuring my shell
  #+BEGIN_SRC emacs-lisp
  (setq exec-path-from-shell-arguments '("-l"))
  #+END_SRC
