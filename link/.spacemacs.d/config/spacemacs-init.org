A configuration file to setup spacemacs defaults
------------------------------------------------------------------------------
#+TITLE: Spacemacs initialization configuration file
#+PROPERTY: header-args :comments org
#+PROPERTY: header-args :padline no
#+PROPERTY: header-args :tangle yes
#+STARTUP: hidestars overview
#+FILETAGS: spacemacs tangle dotfiles config

* Overview
  =.spacemacs.d/init.el= tangles and loads this file.
  This provides the =dotspacemacs/init()= function, which has several settings
  for the overall configuration of spacemacs

  #+BEGIN_SRC emacs-lisp
    ;; this file is automatically generated from ~/.spacemacs.d/config/spacemacs-init.org
    ;; any changes made here will be over written upon next startup
  #+END_SRC

* init function
   Initialization function.  This function is called at the very startup of
   Spacemacs initialization before layers configuration.  You should not put any
   user code in there besides modifying the variable values

  #+BEGIN_SRC emacs-lisp :tangle yes
  (defun dotspacemacs/init ()
  #+END_SRC

** elpa https
   If non nil ELPA repositories are contacted via HTTPS whenever it's
   possible. Set it to nil if you have no way to use HTTPS in your
   environment, otherwise it is strongly recommended to let it set to t.
   This variable has no effect if Emacs is launched with the parameter
   `--insecure' which forces the value of this variable to nil.
   (default t)
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq-default dotspacemacs-elpa-https nil)
   #+END_SRC

** elpa timeout
   Maximum allowed time in seconds to contact an ELPA repository.

   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq-default dotspacemacs-elpa-timeout 5)
   #+END_SRC

** check for update
   If non nil then spacemacs will check for updates at startup
   when the current branch is not `develop'. Note that checking for
   new versions works via git commands, thus it calls GitHub services
   whenever you start Emacs. (default nil)
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq-default dotspacemacs-check-for-update nil)
   #+END_SRC
** elpa subdirectory
   If non-nil, a form that evaluates to a package directory. For example, to
   use different package directories for different Emacs versions, set this
   to `emacs-version'.
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq-default dotspacemacs-elpa-subdirectory nil)
   #+END_SRC
** editing style
   One of `vim', `emacs' or `hybrid'.
   `hybrid' is like `vim' except that `insert state' is replaced by the
   `hybrid state' with `emacs' key bindings. The value can also be a list
   with `:variables' keyword (similar to layers). Check the editing styles
   section of the documentation for details on available variables.
   (default 'vim)
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq-default dotspacemacs-editing-style 'hybrid)
   #+END_SRC
** verbose loading
   If non nil output loading progress in `*Messages*' buffer. (default nil)
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq-default dotspacemacs-verbose-loading nil)
   #+END_SRC
** startup banner
   Specify the startup banner. Default value is `official', it displays
   the official spacemacs logo. An integer value is the index of text
   banner, `random' chooses a random text banner in `core/banners'
   directory. A string value must be a path to an image format supported
   by your Emacs build.
   If the value is nil then no banner is displayed. (default 'official)
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq-default dotspacemacs-startup-banner 'nil)
   #+END_SRC
** startup lists
   List of items to show in startup buffer or an association list of
   the form `(list-type . list-size)`. If nil then it is disabled.
   Possible values for list-type are:
   `recents' `bookmarks' `projects' `agenda' `todos'."
   List sizes may be nil, in which case
   `spacemacs-buffer-startup-lists-length' takes effect.
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq-default dotspacemacs-startup-lists '((agenda)
                                (recents . 5)
                                (projects . 7)
                                (bookmarks . 5)))
   #+END_SRC
** startup buffer responsive
   True if the home buffer should respond to resize events.
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq-default dotspacemacs-startup-buffer-responsive t)
   #+END_SRC
** scratch mode
   Default major mode of the scratch buffer (default `text-mode')
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq-default dotspacemacs-scratch-mode 'org-mode)
   #+END_SRC
** themes
   List of themes, the first of the list is loaded when spacemacs starts.
   Press <SPC> T n to cycle to the next theme in the list (works great
   with 2 themes variants, one dark and one light)
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq-default dotspacemacs-themes '(hc-zenburn twilight soft-morning))
   #+END_SRC
** color cursor according to state
   If non nil the cursor color matches the state color in GUI Emacs.
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq-default dotspacemacs-colorize-cursor-according-to-state t)
   #+END_SRC
** default font
   Default font, or prioritized list of fonts. `powerline-scale' allows to
   quickly tweak the mode-line size to make separators look not too crappy.
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq-default dotspacemacs-default-font '("Source Code Pro"
                               :size 14
                               :weight normal
                               :width normal
                               :powerline-scale 1.4))
   #+END_SRC
** leader key
   The leader key
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq-default dotspacemacs-leader-key "SPC")
   #+END_SRC
** emacs command key
   The key used for Emacs commands (M-x) (after pressing on the leader key).
   (default "SPC")
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq-default dotspacemacs-emacs-command-key "SPC")
   #+END_SRC
** ex command key
   The key used for Vim Ex commands (default ":")
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq-default dotspacemacs-ex-command-key ":")
   #+END_SRC
** emacs leader key
   The leader key accessible in `emacs state' and `insert state'
   (default "M-m")
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq-default dotspacemacs-emacs-leader-key "M-m")
   #+END_SRC
** major mode leader key
   Major mode leader key is a shortcut key which is the equivalent of
   pressing `<leader> m`. Set it to `nil` to disable it. (default ",")
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq-default dotspacemacs-major-mode-leader-key ",")
   #+END_SRC
** major mode emacs leader key
   Major mode leader key accessible in `emacs state' and `insert state'.
   (default "C-M-m")
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq-default dotspacemacs-major-mode-emacs-leader-key "C-M-m")
   #+END_SRC
** distinguish gui tab
   These variables control whether separate commands are bound in the GUI to
   the key pairs C-i, TAB and C-m, RET.
   Setting it to a non-nil value, allows for separate commands under <C-i>
   and TAB or <C-m> and RET.
   In the terminal, these pairs are generally indistinguishable, so this only
   works in the GUI. (default nil)
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq-default dotspacemacs-distinguish-gui-tab nil)
   #+END_SRC
** remap Y
   If non nil `Y' is remapped to `y$' in Evil states. (default nil)
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq-default dotspacemacs-remap-Y-to-y$ nil)
   #+END_SRC
** visual state on shift
   If non-nil, the shift mappings `<' and `>' retain visual state if used
   there. (default t)
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq-default dotspacemacs-retain-visual-state-on-shift t)
   #+END_SRC
** visual line move text
   If non-nil, J and K move lines up and down when in visual mode.
   (default nil)
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq-default dotspacemacs-visual-line-move-text nil)
   #+END_SRC
** ex substitute
   If non nil, inverse the meaning of `g' in `:substitute' Evil ex-command.
   (default nil)
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq-default dotspacemacs-ex-substitute-global nil)
   #+END_SRC
** default layout name
   Name of the default layout (default "Default")
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq-default dotspacemacs-default-layout-name "Default")
   #+END_SRC
** display default layout
   If non nil the default layout name is displayed in the mode-line.
   (default nil)
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq-default dotspacemacs-display-default-layout nil)
   #+END_SRC
** auto resume layouts
   If non nil then the last auto saved layouts are resume automatically upon
   start. (default nil)
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq-default dotspacemacs-auto-resume-layouts nil)
   #+END_SRC
** large file size
   Size (in MB) above which spacemacs will prompt to open the large file
   literally to avoid performance issues. Opening a file literally means that
   no major mode or minor modes are active. (default is 1)
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq-default dotspacemacs-large-file-size 1)
   #+END_SRC
** auto save file location
   Location where to auto-save files. Possible values are `original' to
   auto-save the file in-place, `cache' to auto-save the file to another
   file stored in the cache directory and `nil' to disable auto-saving.
   (default 'cache)
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq-default dotspacemacs-auto-save-file-location 'cache)
   #+END_SRC
** max rollbacks
   Maximum number of rollback slots to keep in the cache. (default 5)
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq-default dotspacemacs-max-rollback-slots 5)
   #+END_SRC
** helm resize
   If non nil, `helm' will try to minimize the space it uses. (default nil)
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq-default dotspacemacs-helm-resize nil)
   #+END_SRC
** helm no header
   if non nil, the helm header is hidden when there is only one source.
   (default nil)
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq-default dotspacemacs-helm-no-header nil)
   #+END_SRC
** helm position
   define the position to display `helm', options are `bottom', `top',
   `left', or `right'. (default 'bottom)
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq-default dotspacemacs-helm-position 'bottom)
   #+END_SRC
** helm use fuzzy match
   Controls fuzzy matching in helm. If set to `always', force fuzzy matching
   in all non-asynchronous sources. If set to `source', preserve individual
   source settings. Else, disable fuzzy matching in all sources.
   (default 'always)
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq-default dotspacemacs-helm-use-fuzzy 'always)
   #+END_SRC
** enable paste transient state
   If non nil the paste micro-state is enabled. When enabled pressing `p`
   several times cycle between the kill ring content. (default nil)
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq-default dotspacemacs-enable-paste-transient-state nil)
   #+END_SRC
** which key delay
   Which-key delay in seconds. The which-key buffer is the popup listing
   the commands bound to the current keystroke sequence. (default 0.4)
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq-default dotspacemacs-which-key-delay 0.4)
   #+END_SRC
** which key position
   Which-key frame position. Possible values are `right', `bottom' and
   `right-then-bottom'. right-then-bottom tries to display the frame to the
   right; if there is insufficient space it displays it at the bottom.
   (default 'bottom)
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq-default dotspacemacs-which-key-position 'bottom)
   #+END_SRC
** loading progress bar
   If non nil a progress bar is displayed when spacemacs is loading. This
   may increase the boot time on some systems and emacs builds, set it to
   nil to boost the loading time. (default t)
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq-default dotspacemacs-loading-progress-bar t)
   #+END_SRC
** full screen at startup
   If non nil the frame is fullscreen when Emacs starts up. (default nil)
   (Emacs 24.4+ only)
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq-default dotspacemacs-fullscreen-at-startup nil)
   #+END_SRC
** full screen use non-native
   If non nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
   Use to disable fullscreen animations in OSX. (default nil)
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq-default dotspacemacs-fullscreen-use-non-native nil)
   #+END_SRC
** maximized at startup
   If non nil the frame is maximized when Emacs starts up.
   Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
   (default nil) (Emacs 24.4+ only)
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq-default dotspacemacs-maximized-at-startup nil)
   #+END_SRC
** active transparency
   A value from the range (0..100), in increasing opacity, which describes
   the transparency level of a frame when it's active or selected.
   Transparency can be toggled through `toggle-transparency'. (default 90)
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq-default dotspacemacs-active-transparency 90)
   #+END_SRC
** inactive transparency
   A value from the range (0..100), in increasing opacity, which describes
   the transparency level of a frame when it's inactive or deselected.
   Transparency can be toggled through `toggle-transparency'. (default 90)
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq-default dotspacemacs-inactive-transparency 70)
   #+END_SRC
** show transient state title
   If non nil show the titles of transient states. (default t)
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq-default dotspacemacs-show-transient-state-title t)
   #+END_SRC
** show transient state color guide
   If non nil show the color guide hint for transient state keys. (default t)
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq-default dotspacemacs-show-transient-state-color-guide t)
   #+END_SRC
** mode line unicode
   If non nil unicode symbols are displayed in the mode line. (default t)
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq-default dotspacemacs-mode-line-unicode-symbols t)
   #+END_SRC
** smooth scrolling
   If non nil smooth scrolling (native-scrolling) is enabled. Smooth
   scrolling overrides the default behavior of Emacs which recenters point
   when it reaches the top or bottom of the screen. (default t)
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq-default dotspacemacs-smooth-scrolling t)
   #+END_SRC
** line numbers
   If non nil line numbers are turned on in all `prog-mode' and `text-mode'
   derivatives. If set to `relative', also turns on relative line numbers.
   (default nil)
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq-default dotspacemacs-line-numbers t)
   #+END_SRC
** folding method
   Code folding method. Possible values are `evil' and `origami'.
   (default 'evil)
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq-default dotspacemacs-folding-method 'origami)
   #+END_SRC
** smartparens strict mode
   If non-nil smartparens-strict-mode will be enabled in programming modes.
   (default nil)
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq-default dotspacemacs-smartparens-strict-mode nil)
   #+END_SRC
** smart closing parenthesis
   If non-nil pressing the closing parenthesis `)' key in insert mode passes
   over any automatically added closing parenthesis, bracket, quote, etc…
   This can be temporary disabled by pressing `C-q' before `)'. (default nil)
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq-default dotspacemacs-smart-closing-parenthesis t)
   #+END_SRC
** highlight delimiters
   Select a scope to highlight delimiters. Possible values are `any',
   `current', `all' or `nil'. Default is `all' (highlight any scope and
   emphasis the current one). (default 'all)
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq-default dotspacemacs-highlight-delimiters 'all)
   #+END_SRC
** persistent server
   If non nil, advise quit functions to keep server open when quitting.
   (default nil)
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq-default dotspacemacs-persistent-server nil)
   #+END_SRC
** search tools
   List of search tool executable names. Spacemacs uses the first installed
   tool of the list. Supported tools are `ag', `pt', `ack' and `grep'.
   (default '("ag" "pt" "ack" "grep"))
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq-default dotspacemacs-search-tools '("ag" "pt" "ack" "grep"))
   #+END_SRC
** default package repository
   The default package repository used if no explicit repository has been
   specified with an installed package.
   Not used for now. (default nil)
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq-default dotspacemacs-default-package-repository nil)
   #+END_SRC
** whitespace cleanup
   Delete whitespace while saving buffer. Possible values are `all'
   to aggressively delete empty line and long sequences of whitespace,
   `trailing' to delete only the whitespace at end of lines, `changed'to
   delete only whitespace for changed lines or `nil' to disable cleanup.
   (default nil)
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq-default dotspacemacs-whitespace-cleanup 'trailing)
   #+END_SRC
** Closing init function
   #+BEGIN_SRC emacs-lisp :tangle yes
   )
   #+END_SRC
