A configuration file to load custom user functions
------------------------------------------------------------------------------
#+TITLE: Spacemacs User functions file
#+PROPERTY: header-args :comments org
#+PROPERTY: header-args :padline no
#+PROPERTY: header-args :tangle yes
#+STARTUP: hidestars overview
#+FILETAGS: spacemacs tangle dotfiles config

* Overview
  =.spacemacs.d/init.el= tangles and loads this file.
  This provides personal functions at load time.

  #+BEGIN_SRC emacs-lisp
    ;; this file is automatically generated from ~/.spacemacs.d/config/spacemacs-user-functions.org
    ;; any changes made here will be over written upon next startup
  #+END_SRC

* review
  Simple function to open the review file.

  #+BEGIN_SRC emacs-lisp
  (defun review ()
    (interactive)
    (find-file "~/org/review.org")
   )
  #+END_SRC

* gtd
  convenience function to open the main org file

  #+BEGIN_SRC emacs-lisp
  (defun gtd ()
  (interactive)
  (find-file "~/org/planner.org")
  )
  #+END_SRC

* rebuild org-agenda files
  I want to be able to reload the list of refile targets if I add files
  #+BEGIN_SRC emacs-lisp
    (defun rebuild-agenda-files ()
      (interactive)
      (setq org-agenda-files (file-expand-wildcards "~/org/*.org"))
      (setq org-agenda-text-search-extra-files (file-expand-wildcards "~/org/notes/*.org"))
      (setq tra:all-org-files ( append
                                org-agenda-files
                                org-agenda-text-search-extra-files)
            )
      )
  #+END_SRC



* Save org buffers often
  I dont want to lose any info from org mode, and when I refile, a lot of org
  buffers end up open.  This saves them at regular intervals.

  #+BEGIN_SRC emacs-lisp
  (add-hook 'auto-save-hook 'org-save-all-org-buffers)
  #+END_SRC

* Capture from the command line or from org-protocol
  I want the capture from external programs to close the frame after it is done

  #+BEGIN_SRC emacs-lisp
      (add-hook 'org-capture-mode-hook 'delete-other-windows)

    (defadvice org-capture-finalize (after delete-capture-frame activate)
      "Advise capture-finalize to close the frame if it is the capture frame"
      (if (equal "capture" (frame-parameter nil 'name))
          (delete-frame)))

    (defadvice org-capture-destroy
        (after delete-capture-frame activate)
      "Advise capture-destroy to close the frame"
      (if (equal "capture" (frame-parameter nil 'name))
          (delete-frame)))

    (defun make-capture-frame ()
      "Create a new frame and run org-capture"
      (interactive)
      (make-frame-on-display ":0" '((name . "capture")
                    (width . 120)
                    (height . 20)))
      (select-frame-by-name "capture")
      (org-capture nil "o")
      )

  #+END_SRC

* jump into a deft search from the command line

  #+BEGIN_SRC emacs-lisp
  (defun make-deft-frame ()
  "Create a new frame and run deft"
  (interactive)
  (make-frame-on-display ":0"
                         '((name . "deft")
                           (width . 120)
                           (height . 20)))
  (select-frame-by-name "deft")
  (deft))
  #+END_SRC

* print the current tree to a file
   ;; this function creates an new buffer with just the current tree in
   ;; it.  Next it sets some ps-print settings, and finally saves the
   ;; file as a postscript for printing.

   #+BEGIN_SRC emacs-lisp

     (defun print-narrowed-project ()
       (interactive)
       (org-tree-to-indirect-buffer)
       (set-buffer org-last-indirect-buffer)
       (setq ps-number-of-columns 1)
       (setq ps-landscape-mode nil)
       (setq ps-paper-type 'statement)
       (setq ps-top-margin 63)
       (setq ps-bottom-margin 36)
       (setq ps-left-margin 18)
       (setq ps-right-margin 18)
       (setq ps-zebra-stripes t)
       (setq ps-zebra-stripe-height 1)
       (setq ps-print-header nil)
       (setq ps-print-footer nil)
       (setq ps-print-n-of-n nil)
       (ps-spool-buffer)
       (set-buffer "*PostScript*")
       (write-file (concat "~/paperPlanner/Agenda-Export/" (buffer-name org-last-indirect-buffer) ".ps"))
       )

     (defun print-buffer-as-planner-page ()
       (interactive)
       (setq ps-number-of-columns 1)
       (setq ps-landscape-mode nil)
       (setq ps-paper-type 'statement)
       (setq ps-top-margin 63)
       (setq ps-bottom-margin 36)
       (setq ps-left-margin 18)
       (setq ps-right-margin 18)
       (setq ps-zebra-stripes t)
       (setq ps-zebra-stripe-height 1)
       (setq ps-print-header nil)
       (setq ps-print-footer nil)
       (setq ps-print-n-of-n nil)
       (ps-spool-buffer)
       (set-buffer "*PostScript*")
       (write-file (concat "~/paperPlanner/Agenda-Export/" (buffer-name org-last-indirect-buffer) ".ps"))
       )

   #+END_SRC

* notifications in the window manager for events
  use vlc and notify send
  http://emacs-fu.blogspot.com/2009/11/showing-pop-ups.html

  #+BEGIN_SRC emacs-lisp
    (defun djcb-popup (title msg &optional icon sound)
      "Show a popup if we're on X, or echo it otherwise; TITLE is the title
    of the message, MSG is the context. Optionally, you can provide an ICON and
    a sound to be played"

      (interactive)
      (when sound (shell-command
                   (concat "cvlc --play-and-exit " sound " 2> /dev/null")))
      (if (eq window-system 'x)
          (shell-command (concat "notify-send "
                                 "-t 300000 "
                                 (if icon (concat "-i " icon) "")
                                 " '" title "' '" msg "'"))
        ;; text only version

        (message (concat title ": " msg))))


    (defun djcb-appt-display (min-to-app new-time msg)

      (djcb-popup (format "Appointment in %s minute(s)" min-to-app) msg
                  "/usr/share/icons/Papirus-Dark/48x48/status/task-due.svg"

                  "/usr/share/sounds/freedesktop/stereo/phone-incoming-call.oga"))
    (setq appt-disp-window-function (function djcb-appt-display))

  #+END_SRC

* Show all of the time blocks in grid view
  https://emacs.stackexchange.com/questions/35865/org-agenda-remove-time-grid-lines-that-are-in-an-appointment
  I want free time to be obvious in the grid view.  Meaning, if an appointment goes from 8-10, "block"
  that time in the agenda so that it looks like a time-block...

  #+BEGIN_SRC emacs-lisp

    (defun org-time-to-minutes (time)
      "Convert an HHMM time to minutes"
      (+ (* (/ time 100) 60) (% time 100)))

    (defun org-time-from-minutes (minutes)
      "Convert a number of minutes to an HHMM time"
      (+ (* (/ minutes 60) 100) (% minutes 60)))

    (defadvice org-agenda-add-time-grid-maybe (around mde-org-agenda-grid-tweakify
                                                      (list ndays todayp))
      (if (member 'remove-match (car org-agenda-time-grid))
          (flet ((extract-window
                  (line)
                  (let ((start (get-text-property 1 'time-of-day line))
                        (dur (get-text-property 1 'duration line)))
                    (cond
                     ((and start dur)
                      (cons start
                            (org-time-from-minutes
                             (truncate
                              (+ dur (org-time-to-minutes start))))))
                     (start start)
                     (t nil)))))
            (let* ((windows (delq nil (mapcar 'extract-window list)))
                   (org-agenda-time-grid
                    (list
                     (car org-agenda-time-grid)
                     (remove-if
                      (lambda (time)
                        (find-if (lambda (w)
                                   (if (numberp w)
                                       (equal w time)
                                     (and (>= time (car w))
                                          (< time (cdr w)))))
                                 windows))
                      (cadr org-agenda-time-grid) )
                     (caddr org-agenda-time-grid)
                     (cadddr org-agenda-time-grid)
                     )))
              ad-do-it))
        ad-do-it))
    (ad-activate 'org-agenda-add-time-grid-maybe)
  #+END_SRC
