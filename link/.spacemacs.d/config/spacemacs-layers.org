A configuration file to setup spacemacs layers
------------------------------------------------------------------------------
#+TITLE: Spacemacs Layer configuration file
#+PROPERTY: header-args :comments org
#+PROPERTY: header-args :padline no
#+PROPERTY: header-args :tangle yes
#+STARTUP: hidestars overview
#+FILETAGS: spacemacs tangle dotfiles config

* Overview
  .spacemacs.d/init.el tangles and loads this file.
  This provides the dotspacemacs/layers() function, which has several lists
  that control the install of layers and packages.

   #+BEGIN_SRC emacs-lisp
    ;; this file is automatically generated from ~/.spacemacs.d/config/spacemacs-layers.org
    ;; any changes made here will be over written upon next startup
   #+END_SRC

* Layers function
  Open the defun here, but be careful to ensure that it is closed at the bottom.
  Some additional details about layers can be found in
  [[file:~/.emacs.d/layers/LAYERS.org]] also, look at
  [[~/.emacs.d/layers/auto-layer.el]] for how layers are associated to files.

  #+BEGIN_SRC emacs-lisp
    (defun dotspacemacs/layers ()
  #+END_SRC

** Base distribution
   Base distribution to use. This is a layer contained in the directory
   `+distribution'. For now available distributions are
   - spacemacs-base
   - spacemacs
   (default 'spacemacs)

   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-distribution 'spacemacs)
   #+END_SRC

** Lazy install
    Lazy installation of layers (i.e. layers are installed only when a file
   with a supported type is opened). Possible values are:
   - all :: lazy install any layer that support lazy installation even the
     layers listed in =dotspacemacs-configuration-layers=
   - unused :: will lazy install only unused layers (i.e. layers  not listed
   in variable =dotspacemacs-configuration-layers= )
   - nil :: disable the lazy installation feature and you have to explicitly
     list a layer in the variable =dotspacemacs-configuration-layers= to install
     it.
   (default 'unused)

   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-enable-lazy-installation 'unused)
   #+END_SRC

*** ask first
    If non-nil then Spacemacs will ask for confirmation before installing a
    layer lazily. If non-nil layers with lazy install support are lazy
    installed.
    (default t)

    #+BEGIN_SRC emacs-lisp
    (setq-default dotspacemacs-ask-for-lazy-installation t)
    #+END_SRC

** install packages
   Defines the behaviour of Spacemacs when installing packages.
   Possible values are:
   - used-only :: installs only explicitly used packages and uninstall any
     unused packages as well as their unused dependencies.
   - used-but-keep-unused :: installs only the used packages but won't uninstall
     them if they become unused.
   - all :: installs *all* packages supported by Spacemacs and never uninstall
     them.
   (default is `used-only')

   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-install-packages 'used-only)
   #+END_SRC

** Additional paths
   List of additional paths where to look for configuration layers.
   Paths must have a trailing slash (i.e. `~/.mycontribs/')

   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-configuration-layer-path '())
   #+END_SRC

** configuration layers
   :PROPERTIES:
   :VISIBILITY: all
   :END:
   List of configuration layers to load.  This is the main way to add
   functionality to spacemacs.  Adding the layer here causes spacemacs to
   install and configure the components.  Look at =~/.emacs.d/layers= for an
   idea of the grouping and naming.

   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-configuration-layers
   '(
   #+END_SRC

*** Emacs tools
    [[file:~/.emacs.d/layers/+emacs/README.org]]
    These layers add functionality to emacs as an application and or improve on
    base packages such as =org mode=

    #+BEGIN_SRC emacs-lisp
    better-defaults   ;; emacs mode configuration
    semantic          ;; parsers and IDE type functions
    org               ;; of course
    outshine          ;; org-mode in comments, and org-mode navigation
    helpful           ;; more detailed help from emacs
    ibuffer           ;; grouping in the buffer list
   #+END_SRC

*** Completions
    [[file:~/.emacs.d/layers/+completion/README.org]]
    These layers add completion functions in programming languages, commands,
    and other functions across emacs

    #+BEGIN_SRC emacs-lisp
      helm              ;; use helm over ivy for emacs functions
      auto-completion   ;; tab completion, snippets
    #+END_SRC

*** Templates
    file:~/.emacs.d/layers/+templates/README.org
    Text automatically inserted in a new file.

    #+BEGIN_SRC emacs-lisp
    templates           ;; use yasnippet to fill in new files
    #+END_SRC

*** Checking
    These layers verify and validate text in the buffer.
    [[file:~/.emacs.d/layers/+checkers/README.org]]

    #+BEGIN_SRC emacs-lisp
    spell-checking    ;; flyspell and supporting packages
    syntax-checking   ;; flycheck and supporting packages
    #+END_SRC

*** Keyboard tools
    [[file:~/.emacs.d/layers/+intl/keyboard-layout/README.org]]

    #+BEGIN_SRC emacs-lisp
      keyboard-layout          ;; help spacemacs do dvorak
    #+END_SRC

*** Programming languages
    [[file:~/emacs.d/layers/+lang]] each language has it's own README.org
    Syntax highlighting, formatting, convenience functions for programming
    languages and file types

    #+BEGIN_SRC emacs-lisp
      c-c++
      emacs-lisp
      shell-scripts
      yaml
      ruby
      lua
      plantuml
      javascript
      html
      latex
      markdown
      python
      windows-scripts
    #+END_SRC

*** Source control
    [[file:~/.emacs.d/layers/+source-control]] Tools have their own README.org
    As the name implies, source control tools such as git, etc.

    #+BEGIN_SRC emacs-lisp
      version-control
      git
      github
    #+END_SRC

*** Tags
    [[file:~/.emacs.d/layers/+tags]] Tools have their own README.org
    Source code tag utilities

    #+BEGIN_SRC emacs-lisp
    cscope
    gtags
    #+END_SRC

*** Coloring text
    [[file:~/.emacs.d/layers/+themes]]
    Themes and color naming

    #+BEGIN_SRC emacs-lisp
      themes-megapack
      colors
    #+END_SRC

*** File trees and dired replacements
    [[file:~/.emacs.d/layers/+filetree/treemacs/README.org]]

    #+BEGIN_SRC emacs-lisp
    treemacs
    #+END_SRC

*** Tools
    [[file:~/.emacs.d/layers/+tools]] A mixed bag of tools for emacs, and tools for
    building things, like compiler integration, etc.
**** Emacs tools

    #+BEGIN_SRC emacs-lisp
      deft
      pdf
      cmake
      meson
    #+END_SRC

**** System tools

    #+BEGIN_SRC emacs-lisp
      ansible
      terraform
      docker
      kubernetes
      xclipboard
    #+END_SRC

*** vi emulation - integration
    [[file:~/.emacs.d/layers/+vim]] Using evil mode (making emacs modal like vim,
     it's kinda cool).

    #+BEGIN_SRC emacs-lisp
      evil-commentary
      evil-snipe
    #+END_SRC

*** Closing configuration layers

    #+BEGIN_SRC emacs-lisp
    )) ;; ending dotspacemacs-configuration-layers
    #+END_SRC

** additional packages
   List of additional packages that will be installed without being
   wrapped in a layer.  Items here are good candidates for creating a layer.

   #+BEGIN_SRC emacs-lisp
     (setq-default dotspacemacs-additional-packages
     '(
   #+END_SRC

*** Packages

    #+BEGIN_SRC emacs-lisp
       drag-stuff
       move-text
       org-ql
       org-alert
       org-attach-screenshot
       calfw
       calfw-org
    #+END_SRC

*** Closing additional packages

    #+BEGIN_SRC emacs-lisp
    ))
    #+END_SRC

** frozen packages
   A list of packages that cannot be updated.  If an older version of a package
    is desired, you can freeze the version here

    #+BEGIN_SRC emacs-lisp
    (setq dotspacemacs-frozen-packages '())
    #+END_SRC

** excluded packages
   A list of packages that will not be installed and loaded.

   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-excluded-packages
    '(
   #+END_SRC

*** Packages

    #+BEGIN_SRC emacs-lisp
      org-projectile
   #+END_SRC

*** Closing excluded packages

   #+BEGIN_SRC emacs-lisp
     ))
   #+END_SRC

** Close the layers function

   #+BEGIN_SRC emacs-lisp
   )
   #+END_SRC
