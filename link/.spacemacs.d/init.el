;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Automatically generated by emacs & org mode
;; Modifications to .spacemacs.d/init.el will be overwritten at next export
;; To change any settings:
;; 1. Edit the org file
;;    /home/aldrichtr/.tangld/src/spacemacs/init.org
;;    with the customizations you want
;; 2. tangle - export the file
;; 3. restart/reload emacs
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Init function
;;   This provides the =dotspacemacs/init()= function, which has several settings
;;   for the overall configuration of spacemacs

;;    Initialization function.  This function is called at the very startup of
;;    Spacemacs initialization before layers configuration.  You should not put any
;;    user code in there besides modifying the variable values

(defun dotspacemacs/init ()
  (message "calling dotspacemacs/init")
  (setq-default dotspacemacs-elpa-https nil)
  (setq-default dotspacemacs-elpa-timeout 5)
  (setq-default dotspacemacs-check-for-update nil)
  (setq-default dotspacemacs-elpa-subdirectory nil)
  (setq-default dotspacemacs-editing-style 'hybrid)
  (setq-default dotspacemacs-verbose-loading nil)
  (setq-default dotspacemacs-startup-banner 'nil)
  (setq-default dotspacemacs-startup-lists '((agenda)
                                             (recents . 5)
                                             (projects . 7)
                                             (bookmarks . 5)))
  (setq-default dotspacemacs-startup-buffer-responsive t)
  (setq-default dotspacemacs-scratch-mode 'org-mode)
  (setq-default dotspacemacs-themes '(hc-zenburn twilight soft-morning))
  (setq-default dotspacemacs-colorize-cursor-according-to-state t)
  (setq-default dotspacemacs-default-font '("Source Code Pro"
                                            :size 14
                                            :weight normal
                                            :width normal
                                            :powerline-scale 1.4))
  (setq-default dotspacemacs-leader-key "SPC")
  (setq-default dotspacemacs-emacs-command-key "SPC")
  (setq-default dotspacemacs-ex-command-key ":")
  (setq-default dotspacemacs-emacs-leader-key "M-m")
  (setq-default dotspacemacs-major-mode-leader-key ",")
  (setq-default dotspacemacs-major-mode-emacs-leader-key "C-M-m")
  (setq-default dotspacemacs-distinguish-gui-tab nil)
  (setq-default dotspacemacs-remap-Y-to-y$ nil)
  (setq-default dotspacemacs-retain-visual-state-on-shift t)
  (setq-default dotspacemacs-visual-line-move-text nil)
  (setq-default dotspacemacs-ex-substitute-global nil)
  (setq-default dotspacemacs-default-layout-name "Default")
  (setq-default dotspacemacs-display-default-layout nil)
  (setq-default dotspacemacs-auto-resume-layouts nil)
  (setq-default dotspacemacs-large-file-size 1)
  (setq-default dotspacemacs-auto-save-file-location 'cache)
  (setq-default dotspacemacs-max-rollback-slots 5)
  (setq-default dotspacemacs-helm-resize nil)
  (setq-default dotspacemacs-helm-no-header nil)
  (setq-default dotspacemacs-helm-position 'bottom)
  (setq-default dotspacemacs-helm-use-fuzzy 'always)
  (setq-default dotspacemacs-enable-paste-transient-state nil)
  (setq-default dotspacemacs-which-key-delay 0.4)
  (setq-default dotspacemacs-which-key-position 'bottom)
  (setq-default dotspacemacs-loading-progress-bar t)
  (setq-default dotspacemacs-fullscreen-at-startup nil)
  (setq-default dotspacemacs-fullscreen-use-non-native nil)
  (setq-default dotspacemacs-maximized-at-startup nil)
  (setq-default dotspacemacs-active-transparency 90)
  (setq-default dotspacemacs-inactive-transparency 70)
  (setq-default dotspacemacs-show-transient-state-title t)
  (setq-default dotspacemacs-show-transient-state-color-guide t)
  (setq-default dotspacemacs-mode-line-theme 'all-the-icons)
  (setq-default dotspacemacs-mode-line-unicode-symbols t)
  (setq-default dotspacemacs-smooth-scrolling t)
  (setq-default dotspacemacs-line-numbers t)
  (setq-default dotspacemacs-folding-method 'origami)
  (setq-default dotspacemacs-smartparens-strict-mode nil)
  (setq-default dotspacemacs-smart-closing-parenthesis t)
  (setq-default dotspacemacs-highlight-delimiters 'all)
  (setq-default dotspacemacs-persistent-server nil)
  (setq-default dotspacemacs-search-tools '("ag" "pt" "ack" "grep"))
  (setq-default dotspacemacs-default-package-repository nil)
  (setq-default dotspacemacs-whitespace-cleanup 'trailing)
  )
;; User init function
;;   This provides the =dotspacemacs/user-init()= function, which can be used to
;;   set any variables *before* layer configuration.

;;    Initialization function.  This function is called at the very startup of
;;    Spacemacs initialization before layers configuration.  You should not put any
;;    user code in there besides modifying the variable values

(defun dotspacemacs/user-init ()
  (message "calling dotspacemacs/user-init")
  (setq org-directory "~/org")
  )
;; Layers function
;;   This provides the dotspacemacs/layers() function, which has several lists
;;   that control the install of layers and packages.

;;   Open the defun here, but be careful to ensure that it is closed at the bottom.
;;   Some additional details about layers can be found in
;;   [[file:~/.emacs.d/layers/LAYERS.org]] also, look at
;;   [[~/.emacs.d/layers/auto-layer.el]] for how layers are associated to files.


(defun dotspacemacs/layers ()
  (message "calling dotspacemacs/layers")
  (setq-default dotspacemacs-distribution 'spacemacs)
  (setq-default dotspacemacs-enable-lazy-installation 'unused)
  (setq-default dotspacemacs-ask-for-lazy-installation t)
  (setq-default dotspacemacs-install-packages 'used-only)
  (setq-default dotspacemacs-configuration-layer-path '())
  (setq-default dotspacemacs-configuration-layers
                '(
                  better-defaults   ;; emacs mode configuration
                  semantic          ;; parsers and IDE type functions
                  (org               ;; of course
                   :variables
                   org-enable-github-support t
                   )
                  outshine          ;; org-mode in comments, and org-mode navigation
                  helpful           ;; more detailed help from emacs
                  ibuffer           ;; grouping in the buffer list
                  helm              ;; use helm over ivy for emacs functions
                  auto-completion   ;; tab completion, snippets
                  templates           ;; use yasnippet to fill in new files
                  spell-checking    ;; flyspell and supporting packages
                  syntax-checking   ;; flycheck and supporting packages
                  keyboard-layout          ;; help spacemacs do dvorak
                  c-c++
                  emacs-lisp
                  shell-scripts
                  yaml
                  ruby
                  lua
                  plantuml
                  javascript
                  html
                  latex
                  markdown
                  python
                  windows-scripts
                  version-control
                  git
                  github
                  cscope
                  gtags
                  themes-megapack
                  colors
                  treemacs
                  deft
                  pdf
                  cmake
                  meson
                  ansible
                  terraform
                  docker
                  kubernetes
                  xclipboard
                  evil-commentary
                  evil-snipe
                  ))
  (setq-default dotspacemacs-additional-packages
                '(
                  drag-stuff
                  move-text
                  org-ql
                  org-alert
                  org-attach-screenshot
                  org-sync
                  org-onenote
                  calfw
                  calfw-org
                  ))
  (setq dotspacemacs-frozen-packages '())
  (setq-default dotspacemacs-excluded-packages
                '(
                  org-projectile
                  ))
  )
;; User config function
;;   This provides the =dotspacemacs/user-config= function.
;;   Open the defun here, but be careful to ensure that it is closed at the bottom.

;;   This function is loaded after the =dotspacemacs/layers= function.  Any custom
;;   settings for the layer, or the included packages should be done here.

;;   *note* that [[~/.emacs.d/layers/auto-layer.el]] does some file association for
;;   layers.


(defun dotspacemacs/user-config ()
  (message "calling dotspacemacs/user-config")
  (setq  better-defaults-move-to-beginning-of-code-first t
         better-defaults-move-to-end-of-code-first t)
  (setq ibuffer-group-buffers-by 'projects)
  (with-eval-after-load 'org
    (setq org-export-backends
          '(ascii
            beamer
            html
            icalendar
            latex
            md
            odt
            org
            taskjuggler
            )
          )
    (require 'ox-latex)
    (add-to-list 'org-latex-packages-alist '("" "minted"))
    (setq org-export-latex-listings 'minted)
    (setq org-src-fontify-natively t)
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (C . t)
       (ditaa . t)
       (plantuml . t)
       (dot . t)
       (latex . t)
       (lua . t)
       (org . t)
       (python . t)
       (ruby . t)
       (shell . t)
       (sqlite . t)
       ))
    (add-hook 'org-mode-hook 'turn-on-auto-fill)
    (add-hook 'org-mode-hook 'flyspell-mode)
    (add-hook 'org-mode-hook (lambda () (hl-todo-mode -1) nil))
    (setq org-todo-keywords '(
                              (sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)" "CANC(c@)")
                              (sequence "MEET(m)" "|")
                              ))
    (setq org-todo-keyword-faces (quote (
                                         ("TODO" :foreground "brown"      :weight bold)
                                         ("NEXT" :foreground "tomato"     :weight bold)
                                         ("MEET" :foreground "tomato"     :weight bold)
                                         ("DONE" :foreground "olive drab" :weight bold)
                                         ("CANC" :foreground "olive drab" :weight bold)
                                         )))
    (setq org-enforce-todo-dependencies t)
    (setq org-enforce-todo-checkbox-dependencies t)
    (setq org-agenda-dim-blocked-tasks nil)
    (setq org-habit-show-habits-only-for-today nil)
    (setq org-global-properties
          (quote (
                  ("Effort_ALL" . "0:15 0:30 1:00 2:00 4:00 1d 5d")
                  )))
    (setq org-stuck-projects
          '(
            ;; the tags-todo search that identifies projects
            "-someday-wait-IGNORE-REVIEW/TODO"
            ;; if these TODO words are found, it is not stuck
            ("NEXT")
            ;; if these tags are found in the subitems, it is not stuck
            nil
            ;; a regular expression that matches non stuck
            ""
            )
          )
    ;; Replace org-set-tags with org-set-tags-command in keybinding
    (spacemacs/set-leader-keys-for-major-mode 'org-mode ":" 'org-set-tags-command)
    (setq org-tags-column -120)

    (setq org-tag-alist '(
                          ;;   Next Action Contexts
                          ("comms"    .   ?c)
                          ("web"      .   ?w)
                          ("cac"      .   ?a)
                          ("office"   .   ?o)
                          ("home"     .   ?h)
                          ("mcen"     .   ?m)
                          ("vault"    .   ?v)
                          ("imefdm"   .   ?i)
                          ("system"   .   ?s)
                          ;;   Meetings and People
                          ("staff"    .   ?t)
                          ("spe"      .   ?p)
                          ("col"      .   ?C)
                          ;;   Categories and flags
                          ("someday"  .   ?S)
                          ("wait"     .   ?W)
                          ("read"     .   ?r)
                          ("fifo"     .   ?f)
                          ("journal"  .   ?j)
                          ("REVIEW"   .   ?R)
                          ))

    (setq org-tags-exclude-from-inheritance '(
                                              "read"
                                              "REVIEW"
                                              "wait"
                                              "fifo"
                                              "journal"
                                              ))
    (org-clock-persistence-insinuate)
    ;; the number of clock tasks to remember in history
    (setq org-clock-history-length 36)
    ;; resume clock when clocking into task with open clock.
    ;; When clocking into a task with a clock entry which has not been closed,
    ;; the clock can be resumed from that point
    (setq org-clock-in-resume t)
    ;; when set to t , both the running clock and entire history are saved when
    ;; emacs closes and resume when emacs restarts
    (setq org-clock-persist t)
    ;; put clock times into LOGBOOK drawer
    (setq org-clock-into-drawer t)
    ;; clock out when the task is marked DONE
    (setq org-clock-out-when-done t)
    ;; set the mode line clock display
    (setq mode-line-org-clock t)
    (setq spaceline-org-clock-p t)
    (require 'org-protocol)
                                        ; set the default directory for some org functionality

    (setq org-default-inbox-file (f-join org-directory "pim-inbox.org"))
    (setq org-default-journal-file (f-join org-directory "jrn-task-ideas-notes-and-brainstorming.org"))
    (defvar tra:org-file-metatypes
      '(("reference" . "^ref[a-zA-Z0-9-_]*\\.org$") ; Reference information
        ("document"  . "^doc[a-zA-Z0-9-_]*\\.org$") ; Document production
        ("blogpost"  . "^pst[a-zA-Z0-9-_]*\\.org$") ; Source document for blog
        ("project"   . "^prj[a-zA-Z0-9-_]*\\.org$") ; Project information
        ("journal"   . "^jrn[a-zA-Z0-9-_]*\\.org$") ; Journal entries
        ("planner"   . "^pim[a-zA-Z0-9-_]*\\.org$") ; Personal information management
        ("tickets"   . "^tkt[a-zA-Z0-9-_]*\\.org$") ; Issue tracking
        ))
    (defvar tra:actionable-metatypes '("project" "journal" "planner"))
    (defvar tra:non-actionable-metatypes '("reference" "document" "blogpost"))
    (defvar tra:org-file-spheres
      '((work . "dseo")  ; Data Systems Engineering Officer at IMEF
        ))
    (setq org-agenda-skip-scheduled-if-done 't)
    (setq org-log-into-drawer 't)
    (setq org-agenda-leading-zero 't)
    (setq org-agenda-custom-commands '())
    (setq org-tags-list-match-sublevels 'indented)
    (add-to-list 'org-agenda-custom-commands
                 '("K" "Stuck Projects"
                   ((org-ql-block '(and
                                    (todo "TODO")
                                    (not (tags "wait" "someday" "calendar"))
                                    (not (scheduled))
                                    (children ( todo "DONE" "CANC"))
                                    (not (children (todo "NEXT")))
                                    (not (children (todo "TODO")))
                                    (not (children (scheduled)))
                                    )
                                  ((org-ql-block-header "Potential close - A TODO with only DONE tasks"))
                                  )
                    (org-ql-block '(and
                                    (todo "TODO")
                                    (not (tags "wait" "someday" "calendar"))
                                    (not (scheduled))
                                    (or
                                     (children (todo "TODO"))
                                     (children (todo "DONE" "CANC"))
                                     )
                                    (not (descendants (todo "NEXT")))
                                    (not (children (scheduled)))
                                    )
                                  ((org-ql-block-header "Needs Actions Defined - A TODO with only TODO or DONE tasks"))
                                  )
                    (org-ql-block '(and
                                    (todo "DONE" "CANC")
                                    (not (tags "wait" "someday" "calendar"))
                                    (not (scheduled))
                                    (or
                                     (children (todo "TODO"))
                                     (children (todo "NEXT"))
                                     )
                                    (not (children (scheduled)))
                                    )
                                  ((org-ql-block-header "Missed Actions - A DONE with active TODO or NEXT"))
                                  )
                    (org-ql-block '(and
                                    (todo "NEXT")
                                    (not (tags "wait" "someday" "calendar"))
                                    (not (scheduled))
                                    (children (todo))
                                    )
                                  ((org-ql-block-header "Mislabled Actions - A NEXT with children"))
                                  )
                    )
                   )
                 )
    (add-to-list 'org-agenda-custom-commands
                 '("p" "The Project List"
                   ((org-ql-block '(and
                                    (todo "TODO")
                                    (not (tags "wait" "someday"))
                                    (not (scheduled))
                                    (children (todo "NEXT"))
                                    )
                                  ((org-ql-block-header "The Project List"))
                                  )
                    )
                   (
                    (org-agenda-with-colors t)
                    (org-agenda-remove-tags t)
                    (ps-print-color-p 'black-white)
                    (ps-paper-type 'letter)
                    (ps-top-margin 3)
                    (ps-bottom-margin 3)
                    (ps-left-margin 3)
                    (ps-right-margin 3)
                    (ps-font-size 8.0)
                    (ps-print-header nil)
                    (ps-landscape-mode t)
                    (ps-number-of-columns 2)
                    )
                   ( "~/paperPlanner/Agenda-Export/Page-03.TheProjectList.txt"
                     "~/paperPlanner/Agenda-Export/Page-03.TheProjectList.ps")
                   )
                 )
    (add-to-list 'org-agenda-custom-commands
                 '("v" "Vertical view of a project"
                   ((tags-todo "-someday-WAIT/!")
                    )
                   (
                    (org-agenda-with-colors t)
                    (org-tags-match-list-sublevels 'indented)
                    )
                   ("~/paperPlanner/Agenda-Export/Page-04.Vertical-ProjectView.ps")
                   )
                 )
    (add-to-list 'org-agenda-custom-commands
                 '("Na" "Next Actions"
                   ((org-ql-block '(and
                                    (todo "NEXT")
                                    (tags "comms")
                                    (not (tags "wait" "someday"))
                                    (not (scheduled))
                                    )
                                  ((org-ql-block-header "Communications"))
                                  )
                    (org-ql-block '(and
                                    (todo "NEXT")
                                    (tags "web")
                                    (not (tags "wait" "someday"))
                                    (not (scheduled))
                                    )
                                  ((org-ql-block-header "Web"))
                                  )
                    (org-ql-block '(and
                                    (todo "NEXT")
                                    (tags "cac")
                                    (not (tags "wait" "someday"))
                                    (not (scheduled))
                                    )
                                  ((org-ql-block-header "DoD Websites"))
                                  )
                    (org-ql-block '(and
                                    (todo "NEXT")
                                    (tags "imefdm")
                                    (not (tags "wait" "someday"))
                                    (not (scheduled))
                                    )
                                  ((org-ql-block-header "Tactical Network"))
                                  )
                    (org-ql-block '(and
                                    (todo "NEXT")
                                    (tags "mcen")
                                    (not (tags "wait" "someday"))
                                    (not (scheduled))
                                    )
                                  ((org-ql-block-header "MCEN"))
                                  )
                    (org-ql-block '(and
                                    (todo "NEXT")
                                    (tags "laptop")
                                    (not (tags "wait" "someday"))
                                    (not (scheduled))
                                    )
                                  ((org-ql-block-header "Laptop (system)"))
                                  )
                    (org-ql-block '(and
                                    (todo "NEXT")
                                    (tags "home")
                                    (not (tags "wait" "someday"))
                                    (not (scheduled))
                                    )
                                  ((org-ql-block-header "At Home"))
                                  )
                    (org-ql-block '(and
                                    (todo "NEXT")
                                    (tags "office")
                                    (not (tags "wait" "someday"))
                                    (not (scheduled))
                                    )
                                  ((org-ql-block-header "At the Office"))
                                  )
                    (org-ql-block '(and
                                    (todo "NEXT")
                                    (tags "spe")
                                    (not (tags "wait" "someday"))
                                    (not (scheduled))
                                    )
                                  ((org-ql-block-header "The SPE Roundtable"))
                                  )
                    (org-ql-block '(and
                                    (todo "NEXT")
                                    (not (tags "comm" "web" "cac" "imefdm" "mcen"
                                               "laptop" "spe" "home" "office" "wait" "someday"))
                                    (not (scheduled))
                                    )
                                  ((org-ql-block-header "Uncategorized Next Actions"))
                                  )
                    )))
    (add-to-list 'org-agenda-custom-commands
                 '("Np" "Potential Next Actions"
                   ((org-ql-block '(and
                                    (todo "TODO")
                                    (not (tags "someday" "calendar"))
                                    (not (scheduled))
                                    (not (children (todo)))
                                    )
                                  ((org-ql-block-header "Potential Next Actions"))
                                  )
                    )
                   ))
    (add-to-list 'org-agenda-custom-commands
                 '("Ne" "Next actions by Effort"
                   ((org-ql-block '(and
                                    (todo "NEXT")
                                    (not (tags "someday" "calendar"))
                                    (not (scheduled))
                                    (property "Effort" "0:15")
                                    )
                                  ((org-ql-block-header "15 Min Next actions"))
                                  )

                    (org-ql-block '(and
                                    (todo "NEXT")
                                    (not (tags "someday" "calendar"))
                                    (not (scheduled))
                                    (property "Effort" "0:30")
                                    )
                                  ((org-ql-block-header "30 Min Next actions"))
                                  )
                    (org-ql-block '(and
                                    (todo "NEXT")
                                    (not (tags "someday" "calendar"))
                                    (not (scheduled))
                                    (property "Effort" "1:00")
                                    )
                                  ((org-ql-block-header "One hour Next actions"))
                                  )
                    (org-ql-block '(and
                                    (todo "NEXT")
                                    (not (tags "someday" "calendar"))
                                    (not (scheduled))
                                    (or
                                     (property "Effort" "2:00")
                                     (property "Effort" "4:00")
                                     )
                                    )
                                  ((org-ql-block-header "Long Next actions"))
                                  )
                    (org-ql-block '(and
                                    (todo "NEXT")
                                    (not (tags "someday" "calendar"))
                                    (not (scheduled))
                                    (not (property "Effort"))
                                    )
                                  ((org-ql-block-header "Next actions with no Effort Assigned"))
                                  )
                    ))
                 )
    (add-to-list 'org-agenda-custom-commands
                 '("Nt" "Time Management"
                   ((org-ql-block '(and
                                    (todo "NEXT")
                                    (not (tags "someday" "calendar"))
                                    (not (scheduled))
                                    (not (children (todo)))
                                    )
                                  ((org-ql-block-header "Time Management"))
                                  )
                    )
                   ((org-agenda-overriding-columns-format "%5TODO %4Effort %4Clocksum %70ITEM(Next Action) %10TAGS")
                    (org-agenda-view-columns-initially t))
                   ))
    (add-to-list 'org-agenda-custom-commands
                 '("w" "Waiting For"
                   ((org-ql-block '(and
                                    (tags "wait")
                                    (not (tags "someday"))
                                    (not (scheduled))
                                    )
                                  ((org-ql-block-header "Waiting For"))
                                  )
                    )
                   ))
    (add-to-list 'org-agenda-custom-commands
                 '("Rb" "Brief Review"
                   ((org-ql-block '(and
                                    (tags "REVIEW")
                                    )
                                  )
                    )
                   )
                 )
    (add-to-list 'org-agenda-custom-commands
                 '("Rd" "Detailed Review"
                   ((org-ql-block '(and
                                    (todo)
                                    (not (tags "someday"))
                                    (not (scheduled))
                                    (tags "REVIEW")
                                    )
                                  ((org-ql-block-header "Tasks marked for Review"))
                                  )
                    (org-ql-block '(and
                                    (not (todo))
                                    (not (todo "DONE"))
                                    (not (tags "someday"))
                                    (not (scheduled))
                                    (tags "REVIEW")
                                    )
                                  ((org-ql-block-header "Items marked for Review"))
                                  )
                    (org-ql-block '(deadline :from today :to 7)
                                  ((org-ql-block-header "Upcoming deadlines this week"))
                                  )

                    (org-ql-block '(scheduled :from today :to 7)
                                  ((org-ql-block-header "Tasks scheduled for this week"))
                                  )

                    (org-ql-block '(clocked :from -7)
                                  ((org-ql-block-header "Tasks worked on last week"))
                                  )
                    )
                   )
                 )
    (add-to-list 'org-agenda-custom-commands
                 '("Rs" "Items that need to be synced with paper"
                   ((org-ql-block '(and
                                    (todo "TODO")
                                    (children (todo "NEXT"))
                                    (not (tags "pp" "someday"))
                                    )
                                  ((org-ql-block-header "Project List Items"))
                                  )
                    (org-ql-block '(and
                                    (todo "NEXT")
                                    (not (tags "pp" "someday"))
                                    )
                                  ((org-ql-block-header "Next Actions"))
                                  )
                    (org-ql-block '(and
                                    (or
                                     (scheduled :from today :to 7)
                                     (deadline :from today :to 7)
                                     (ts-active :from today :to 28)
                                     )
                                    (not (tags "pp"))
                                    )
                                  ((org-ql-block-header "calendar items"))
                                  )
                    )
                   )
                 )
    (setq org-agenda-time-grid (quote
                                ((daily today remove-match)
                                 (0600 0630 0700 0730 0800 0830 0900 0930 1000 1030
                                       1100 1130 1200 1230 1300 1330 1400 1430 1500 1530
                                       1600 1630 1700 1730 1800 1830 1900 1930 2000 2030)
                                 "......" "----------------")))
    (setq org-archive-location "~/org/.archive/%s_archive::datetree/")
    (setq org-archive-save-context-info '(time file olpath category todo itags))
    (setq org-archive-mark-done t)
    (setq org-publish-project-alist '())
    (add-to-list 'org-publish-project-alist
                 '("org-info"
                   :base-directory "/home/aldrichtr/org/org-info/"
                   :base-extension "js"
                   :publishing-directory "/var/www/www.timforge.local/htdocs/styles"
                   :publishing-function org-publish-attachment
                   )
                 )
    (add-to-list 'org-publish-project-alist
                 '("styles"
                   :base-directory "/home/aldrichtr/org/styles/"
                   :base-extension "css"
                   :publishing-directory "/var/www/www.timforge.local/htdocs/styles"
                   :publishing-function org-publish-attachment
                   )
                 )
    (add-to-list 'org-publish-project-alist
                 '("data"
                   :base-directory "/home/aldrichtr/org/data/"
                   :base-extension "png"
                   :recursive t
                   :publishing-directory "/var/www/www.timforge.local/htdocs/data"
                   :publishing-function org-publish-attachment
                   )
                 )
    (add-to-list 'org-publish-project-alist
                 '("org-files"
                   :base-directory "/home/aldrichtr/org/"
                   :base-extension "org"
                   :publishing-directory "/var/www/www.timforge.local/htdocs"
                   :recursive t
                   :makeindex t
                   :auto-sitemap t
                   :sitemap-filename "ref-admn-default.org"
                   :htmlized-source t
                   :publishing-function org-html-publish-to-html
                   )
                 )
    (add-to-list 'org-publish-project-alist
                 '("local-web"
                   :components ("org-info" "styles" "data" "org-files")))
    (setq org-capture-templates '())
    (add-to-list 'org-capture-templates
                 '("o" "Note" entry
                   (file org-default-inbox-file )
                   "* %? "
                   :kill-buffer t)
                 )
    (add-to-list 'org-capture-templates
                 '("w" "Web clipping" entry
                   (file org-default-inbox-file)
                   "* %:description%? :web:\n  %:initial\n  Source :\n %:link"
                   :immediate-finish t
                   )
                 )
    (add-to-list 'org-capture-templates
                 '("W" "capture web clip with note" entry
                   (file org-default-inbox-file )
                   "* %:description%? :web:\n  %:initial\n  Source :\n %:link"
                   )
                 )
    (add-to-list 'org-capture-templates
                 '("j" "Journal entry" entry
                   (file org-default-journal-file )
                   "\n* %<%Y-%m-%d> %? :journal: \n %u"
                   :prepend t
                   :clock-in t
                   :clock-resume t)
                 )
    (add-to-list 'org-capture-templates
                 '( "t" "Add a todo item and close" entry
                    (file org-default-inbox-file)
                    "* TODO %i\n  %U\n"
                    :immediate-finish t
                    :kill-buffer t)
                 )
    ;; the appointment notification facility
    (setq
     appt-message-warning-time 15 ;; warn 15 min in advance
     appt-display-mode-line t     ;; show in the modeline
     appt-display-format 'window) ;; use our func
    (appt-activate 1)              ;; active appt (appointment notification)
    (display-time)                 ;; time display is required for this...

    ;; update appt:
    ;; - when starting emacs
    (org-agenda-to-appt)
    ;; - each time agenda opened
    (add-hook 'org-finalize-agenda-hook 'org-agenda-to-appt)
    ;;
    (run-at-time "12:05am" (* 24 3600) 'org-agenda-to-appt)
    (require 'org-alert)
    (setq alert-default-style 'libnotify)
    (org-alert-enable)
    (require 'ox-taskjuggler)
    (setq org-taskjuggler-project-tag "tjp")
    (setq org-taskjuggler-reports-directory "~/org/reports")
    (setq org-taskjuggler-default-project-duration 980)
    (setq org-taskjuggler-default-reports
          '("textreport report \"Plan\" {
  formats html
  header '== <-query attribute=\"name\"-> =='

  center -8<-
    [#Plan Plan] | [#Resource_Allocation Resource Allocation]
    ----
    === Plan ===
    <[report id=\"plan\"]>
    ----
    === Resource Allocation ===
    <[report id=\"resourceGraph\"]>
  ->8-
}

# A traditional Gantt chart with a project overview.
taskreport plan \"\" {
  headline \"Project Plan\"
  columns bsi, name, complete, start, end, effort, chart
# rollup completed tasks
#  rolluptask plan.end < ${now}
  loadunit shortauto
  hideresource 1
}

# A graph showing resource allocation. It identifies whether each
# resource is under- or over-allocated for.
resourcereport resourceGraph \"\" {
  headline \"Resource Allocation Graph\"
  columns no, name, effort, weekly
  loadunit shortauto
  hidetask ~(isleaf() & isleaf_())
  sorttasks plan.start.up
}"))
    (require 'org-sync-github)
    )
  (add-to-list 'load-path "~/.spacemacs.d/external/elgantt/")
  (require 'elgantt)
  (setq elgantt-timestamps-to-display '(deadline timestamp scheduled timestamp-range))
  (setq elgantt-draw-overarching-headers 't)
  (setq yas-snippet-dirs
        '("~/.spacemacs.d/snippets"))
  (yas-global-mode 1)
  (setq auto-completion-enable-snippets-in-popup t)
  (setq auto-completion-enable-sort-by-usage t)
  (global-company-mode)
  (setq templates-private-directory "~/.spacemacs.d/templates/")
  (setq kl-layout 'dvorak
        kl-disabled-configurations '(
                                     helm
                                     org
                                     magit
                                     twittering-mode))
  (setq c-basic-offset 4)
  (defconst my-c-style
    '((c-tab-always-indent        . t)
      (c-comment-only-line-offset . 0)
      (c-hanging-braces-alist     . ((substatement-open after)
                                     (brace-list-open)))
      (c-hanging-colons-alist     . ((member-init-intro before)
                                     (inher-intro)
                                     (case-label after)
                                     (label after)
                                     (access-label after)))
      (c-cleanup-list             . (scope-operator
                                     empty-defun-braces
                                     defun-close-semi))
      (c-offsets-alist            . ((arglist-close . c-lineup-arglist)
                                     (substatement-open . 0)
                                     (case-label        . 4)
                                     (block-open        . 0)
                                     (namespace-open    . 0)
                                     (innamespace       . 0)
                                     (knr-argdecl-intro . -)))
      (c-echo-syntactic-information-p . t)
      )
    "My C Programming Style")

  ;; offset customizations not in my-c-style
  (setq c-offsets-alist '((member-init-intro . ++)))

  ;; Customizations for all modes in CC Mode.
  (defun my-c-mode-common-hook ()
    ;; add my personal style and set it for the current buffer
    (c-add-style "PERSONAL" my-c-style t)
    ;; other customizations
    (setq tab-width 4
          ;; this will make sure spaces are used instead of tabs
          indent-tabs-mode nil)
    ;; we like auto-newline and hungry-delete
    (c-toggle-auto-hungry-state 1)
    )
  (add-hook 'c-mode-common-hook 'my-c-mode-common-hook)
  (add-hook 'c++-mode-hook 'my-c-mode-common-hook)
  (setq org-plantuml-jar-path "/usr/share/plantuml/plantuml.jar")
  (setq treemacs-use-follow-mode 'tag
        treemacs-use-filewatch-mode t
        treemacs-use-git-mode 'deferred
        treemacs-use-all-the-icons-theme t)
  (setq deft-use-filename-as-title t)
  ;; with this tell deft to use the search
  ;; term as the filename if a new file is created
  (setq deft-use-filter-string-for-filename t)
  (setq deft-file-naming-rules
        '((noslash . "-")
          (nospace . "-")
          (case-fn . downcase)))
  (setq deft-text-mode 'org-mode)
  (setq deft-org-mode-title-prefix t)
  (setq deft-directory org-directory)
  (setq deft-archive-directory "../.archive/")
  (setq deft-extensions '("org"))
  (setq deft-default-extension "org")
  (setq deft-auto-save-interval 30)
  (require 'calfw)
  (require 'calfw-org)
  (setq calendar-week-start-day 1) ;; monday
  (add-to-list 'load-path "~/.spacemacs.d/external/remind-mode.el")
  (add-to-list 'auto-mode-alist '("\\.rem\\'" . remind-mode))
  (spacemacs/declare-prefix "o" "custom")
  (spacemacs/set-leader-keys "og" 'gtd)
  (spacemacs/set-leader-keys "od" 'deft)
  (spacemacs/declare-prefix-for-mode 'org-mode "mo" "custom")
  (spacemacs/set-leader-keys-for-major-mode 'org-mode "oi" 'org-id-get-create)
  (spacemacs/set-leader-keys-for-major-mode 'org-mode "ort" 'tra:refile-actionable-items)
  (spacemacs/set-leader-keys-for-major-mode 'org-mode "orr" 'tra:refile-reference-items)
  (spacemacs/set-leader-keys-for-major-mode 'org-mode "ors" 'tra:refile-reference-items)
  (rebuild-agenda-files)
  )
(defun review ()
  (interactive)
  (find-file org-default-inbox-file)
  )
(defun gtd ()
  (interactive)
  (find-file org-default-inbox-file)
  )
(defun tra:get-metatype-org-files (metatype &optional other-directory)
  (let ((my-org-directory (or other-directory org-directory "~/org")))
    (f-files my-org-directory (lambda (file)
                                (s-matches?
                                 (cdr (assoc metatype tra:org-file-metatypes)) (f-filename file) )
                                ))))
(defun tra:build-org-agenda-files ()
  (setq org-agenda-files (mapcan
                          'tra:get-metatype-org-files
                          tra:actionable-metatypes))
  (setq org-agenda-text-search-extra-files (mapcan
                                            'tra:get-metatype-org-files
                                            tra:non-actionable-metatypes)))
(message "loading rebuild function")
(defun rebuild-agenda-files ()
  (interactive)
  (org-save-all-org-buffers)
  (tra:build-org-agenda-files)
  (setq tra:all-org-files ( append
                            org-agenda-files
                            org-agenda-text-search-extra-files)
        )
  )
(defun org-refile-actionable-items ()
  "set the refile targets to files that contain actions"
  (interactive)
  (setq org-refile-targets ())
  (setq org-refile-targets '((org-agenda-files :maxlevel . 5)))
  (setq org-refile-use-outline-path 'file)
  (setq org-outline-path-complete-in-steps nil)
  (setq org-refile-allow-creating-parent-nodes 'confirm)
  (org-refile)
  )
(defun org-refile-reference-items ()
  "set the refile targets to files that contain reference"
  (interactive)
  (setq org-refile-targets ())
  (setq org-refile-targets '((org-agenda-text-search-extra-files :maxlevel . 5)))
  (setq org-refile-use-outline-path 'file)
  (setq org-outline-path-complete-in-steps nil)
  (setq org-refile-allow-creating-parent-nodes 'confirm)
  (org-refile)
  )
(defun tra/source-cleanup ()
  (indent-region (point-min) (point-max))
  (save-buffer)
  )

(add-hook 'org-babel-post-tangle-hook 'tra/source-cleanup)
(add-hook 'org-capture-mode-hook 'delete-other-windows)

(defadvice org-capture-finalize (after delete-capture-frame activate)
  "Advise capture-finalize to close the frame if it is the capture frame"
  (if (equal "capture" (frame-parameter nil 'name))
      (delete-frame)))

(defadvice org-capture-destroy
    (after delete-capture-frame activate)
  "Advise capture-destroy to close the frame"
  (if (equal "capture" (frame-parameter nil 'name))
      (delete-frame)))

(defun make-capture-frame ()
  "Create a new frame and run org-capture"
  (interactive)
  (make-frame-on-display ":0" '((name . "capture")
                                (width . 120)
                                (height . 20)))
  (select-frame-by-name "capture")
  (org-capture nil "o")
  )
(defun archive-org-file ()
  (interactive)
  (let ((filename (buffer-file-name)))
    (let ((current-buffer (buffer-name))))
    (if (not (and filename (file-exists-p filename)))
        (message "Buffer %s is not visiting a file" filename)
      (let
          ((new-name
            (concat
             "/home/aldrichtr/org/.archive/"
             (file-name-sans-extension filename)
             "-"
             (format-time-string "%Y%m%d" (current-time))
             ".org_archive"
             ))
           )
        )
      (rename-file filename new-name 1) ;; if the file exists, ask before writing
      (kill-buffer current-buffer)
      (message "File %s successfully archived to %s" filename (file-name-nondirectory new-name))
      )))
(defun make-deft-frame ()
  "Create a new frame and run deft"
  (interactive)
  (make-frame-on-display ":0"
                         '((name . "deft")
                           (width . 120)
                           (height . 20)))
  (select-frame-by-name "deft")
  (deft))
(defun print-narrowed-project ()
  (interactive)
  (org-tree-to-indirect-buffer)
  (set-buffer org-last-indirect-buffer)
  (setq ps-number-of-columns 1)
  (setq ps-landscape-mode nil)
  (setq ps-paper-type 'statement)
  (setq ps-top-margin 63)
  (setq ps-bottom-margin 36)
  (setq ps-left-margin 18)
  (setq ps-right-margin 18)
  (setq ps-zebra-stripes t)
  (setq ps-zebra-stripe-height 1)
  (setq ps-print-header nil)
  (setq ps-print-footer nil)
  (setq ps-print-n-of-n nil)
  (ps-spool-buffer)
  (set-buffer "*PostScript*")
  (write-file (concat "~/paperPlanner/Agenda-Export/" (buffer-name org-last-indirect-buffer) ".ps"))
  )

(defun print-buffer-as-planner-page ()
  (interactive)
  (setq ps-number-of-columns 1)
  (setq ps-landscape-mode nil)
  (setq ps-paper-type 'statement)
  (setq ps-top-margin 63)
  (setq ps-bottom-margin 36)
  (setq ps-left-margin 18)
  (setq ps-right-margin 18)
  (setq ps-zebra-stripes t)
  (setq ps-zebra-stripe-height 1)
  (setq ps-print-header nil)
  (setq ps-print-footer nil)
  (setq ps-print-n-of-n nil)
  (ps-spool-buffer)
  (set-buffer "*PostScript*")
  (write-file (concat "~/paperPlanner/Agenda-Export/" (buffer-name org-last-indirect-buffer) ".ps"))
  )
(defun djcb-popup (title msg &optional icon sound)
  "Show a popup if we're on X, or echo it otherwise; TITLE is the title
of the message, MSG is the context. Optionally, you can provide an ICON and
a sound to be played"

  (interactive)
  (when sound (shell-command
               (concat "cvlc --play-and-exit " sound " 2> /dev/null")))
  (if (eq window-system 'x)
      (shell-command (concat "notify-send "
                             "-t 300000 "
                             (if icon (concat "-i " icon) "")
                             " '" title "' '" msg "'"))
    ;; text only version

    (message (concat title ": " msg))))


(defun djcb-appt-display (min-to-app new-time msg)

  (djcb-popup (format "Appointment in %s minute(s)" min-to-app) msg
              "/usr/share/icons/Papirus-Dark/48x48/status/task-due.svg"

              "/usr/share/sounds/freedesktop/stereo/phone-incoming-call.oga"))
(setq appt-disp-window-function (function djcb-appt-display))
(defun org-time-to-minutes (time)
  "Convert an HHMM time to minutes"
  (+ (* (/ time 100) 60) (% time 100)))

(defun org-time-from-minutes (minutes)
  "Convert a number of minutes to an HHMM time"
  (+ (* (/ minutes 60) 100) (% minutes 60)))

(defadvice org-agenda-add-time-grid-maybe (around mde-org-agenda-grid-tweakify
                                                  (list ndays todayp))
  (if (member 'remove-match (car org-agenda-time-grid))
      (flet ((extract-window
              (line)
              (let ((start (get-text-property 1 'time-of-day line))
                    (dur (get-text-property 1 'duration line)))
                (cond
                 ((and start dur)
                  (cons start
                        (org-time-from-minutes
                         (truncate
                          (+ dur (org-time-to-minutes start))))))
                 (start start)
                 (t nil)))))
        (let* ((windows (delq nil (mapcar 'extract-window list)))
               (org-agenda-time-grid
                (list
                 (car org-agenda-time-grid)
                 (remove-if
                  (lambda (time)
                    (find-if (lambda (w)
                               (if (numberp w)
                                   (equal w time)
                                 (and (>= time (car w))
                                      (< time (cdr w)))))
                             windows))
                  (cadr org-agenda-time-grid) )
                 (caddr org-agenda-time-grid)
                 (cadddr org-agenda-time-grid)
                 )))
          ad-do-it))
    ad-do-it))
(ad-activate 'org-agenda-add-time-grid-maybe)
;; > Do not write anything past this comment. This is where Emacs will
;; > auto-generate custom variable definitions.
;; yeah, i know what you said but... i hate the extra cruft in here

(setq custom-file "~/.spacemacs.d/emacs-customs.el")
(load custom-file)
