A configuration file to setup spacemacs defaults
------------------------------------------------------------------------------
#+TITLE: Spacemacs initialization configuration file
#+PROPERTY: header-args  :comments no
#+PROPERTY: header-args+ :padline no
#+PROPERTY: header-args+ :tangle yes
#+PROPERTY: header-args+ :tangle /home/aldrichtr/.dotfiles/link/.spacemacs.d/init.el
#+STARTUP: hidestars overview
#+FILETAGS: spacemacs tangle dotfiles config

* Overview
  #+BEGIN_SRC emacs-lisp
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; Generated by emacs & org mode
    ;; Modifications to .spacemacs.d/init.el will be overwritten at next export
    ;; To change any settings:
    ;; 1. Edit the org file with the customizations you want
    ;; 2. tangle - export the file
    ;; 3. restart/reload emacs
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  #+END_SRC
* Init function
  This provides the =dotspacemacs/init()= function, which has several settings
  for the overall configuration of spacemacs

   Initialization function.  This function is called at the very startup of
   Spacemacs initialization before layers configuration.  You should not put any
   user code in there besides modifying the variable values
  #+BEGIN_SRC emacs-lisp :comments org
    (defun dotspacemacs/init ()
  #+END_SRC

** elpa https
   If non nil ELPA repositories are contacted via HTTPS whenever it's
   possible. Set it to nil if you have no way to use HTTPS in your
   environment, otherwise it is strongly recommended to let it set to t.
   This variable has no effect if Emacs is launched with the parameter
   `--insecure' which forces the value of this variable to nil.
   (default t)
   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-elpa-https nil)
   #+END_SRC
** elpa timeout
   Maximum allowed time in seconds to contact an ELPA repository.
   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-elpa-timeout 5)
   #+END_SRC
** check for update
   If non nil then spacemacs will check for updates at startup
   when the current branch is not `develop'. Note that checking for
   new versions works via git commands, thus it calls GitHub services
   whenever you start Emacs. (default nil)
   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-check-for-update nil)
   #+END_SRC
** Elpa subdirectory
   If non-nil, a form that evaluates to a package directory. For example, to
   use different package directories for different Emacs versions, set this
   to `emacs-version'.
   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-elpa-subdirectory nil)
   #+END_SRC

** editing style
   One of `vim', `emacs' or `hybrid'.
   `hybrid' is like `vim' except that `insert state' is replaced by the
   `hybrid state' with `emacs' key bindings. The value can also be a list
   with `:variables' keyword (similar to layers). Check the editing styles
   section of the documentation for details on available variables.
   (default 'vim)
   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-editing-style 'hybrid)
   #+END_SRC

** verbose loading
   If non nil output loading progress in `*Messages*' buffer. (default nil)
   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-verbose-loading nil)
   #+END_SRC

** startup banner
   Specify the startup banner. Default value is `official', it displays
   the official spacemacs logo. An integer value is the index of text
   banner, `random' chooses a random text banner in `core/banners'
   directory. A string value must be a path to an image format supported
   by your Emacs build.
   If the value is nil then no banner is displayed. (default 'official)
   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-startup-banner 'nil)
   #+END_SRC

** startup lists
   List of items to show in startup buffer or an association list of
   the form `(list-type . list-size)`. If nil then it is disabled.
   Possible values for list-type are:
   `recents' `bookmarks' `projects' `agenda' `todos'."
   List sizes may be nil, in which case
   `spacemacs-buffer-startup-lists-length' takes effect.
   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-startup-lists '((agenda)
                                (recents . 5)
                                (projects . 7)
                                (bookmarks . 5)))
   #+END_SRC

** startup buffer responsive
   True if the home buffer should respond to resize events.
   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-startup-buffer-responsive t)
   #+END_SRC

** scratch mode
   Default major mode of the scratch buffer (default `text-mode')
   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-scratch-mode 'org-mode)
   #+END_SRC

** themes
   List of themes, the first of the list is loaded when spacemacs starts.
   Press <SPC> T n to cycle to the next theme in the list (works great
   with 2 themes variants, one dark and one light)
   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-themes '(hc-zenburn twilight soft-morning))
   #+END_SRC

** color cursor according to state
   If non nil the cursor color matches the state color in GUI Emacs.
   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-colorize-cursor-according-to-state t)
   #+END_SRC

** default font
   Default font, or prioritized list of fonts. `powerline-scale' allows to
   quickly tweak the mode-line size to make separators look not too crappy.
   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-default-font '("Source Code Pro"
                               :size 14
                               :weight normal
                               :width normal
                               :powerline-scale 1.4))
   #+END_SRC

** leader key
   The leader key
   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-leader-key "SPC")
   #+END_SRC

** emacs command key
   The key used for Emacs commands (M-x) (after pressing on the leader key).
   (default "SPC")
   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-emacs-command-key "SPC")
   #+END_SRC

** ex command key
   The key used for Vim Ex commands (default ":")
   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-ex-command-key ":")
   #+END_SRC

** emacs leader key
   The leader key accessible in `emacs state' and `insert state'
   (default "M-m")
   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-emacs-leader-key "M-m")
   #+END_SRC

** major mode leader key
   Major mode leader key is a shortcut key which is the equivalent of
   pressing `<leader> m`. Set it to `nil` to disable it. (default ",")
   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-major-mode-leader-key ",")
   #+END_SRC

** major mode emacs leader key
   Major mode leader key accessible in `emacs state' and `insert state'.
   (default "C-M-m")
   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-major-mode-emacs-leader-key "C-M-m")
   #+END_SRC

** distinguish gui tab
   These variables control whether separate commands are bound in the GUI to
   the key pairs C-i, TAB and C-m, RET.
   Setting it to a non-nil value, allows for separate commands under <C-i>
   and TAB or <C-m> and RET.
   In the terminal, these pairs are generally indistinguishable, so this only
   works in the GUI. (default nil)
   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-distinguish-gui-tab nil)
   #+END_SRC

** remap Y
   If non nil `Y' is remapped to `y$' in Evil states. (default nil)
   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-remap-Y-to-y$ nil)
   #+END_SRC

** visual state on shift
   If non-nil, the shift mappings `<' and `>' retain visual state if used
   there. (default t)
   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-retain-visual-state-on-shift t)
   #+END_SRC

** visual line move text
   If non-nil, J and K move lines up and down when in visual mode.
   (default nil)
   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-visual-line-move-text nil)
   #+END_SRC

** ex substitute
   If non nil, inverse the meaning of `g' in `:substitute' Evil ex-command.
   (default nil)
   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-ex-substitute-global nil)
   #+END_SRC

** default layout name
   Name of the default layout (default "Default")
   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-default-layout-name "Default")
   #+END_SRC

** display default layout
   If non nil the default layout name is displayed in the mode-line.
   (default nil)
   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-display-default-layout nil)
   #+END_SRC

** auto resume layouts
   If non nil then the last auto saved layouts are resume automatically upon
   start. (default nil)
   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-auto-resume-layouts nil)
   #+END_SRC

** large file size
   Size (in MB) above which spacemacs will prompt to open the large file
   literally to avoid performance issues. Opening a file literally means that
   no major mode or minor modes are active. (default is 1)
   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-large-file-size 1)
   #+END_SRC

** auto save file location
   Location where to auto-save files. Possible values are `original' to
   auto-save the file in-place, `cache' to auto-save the file to another
   file stored in the cache directory and `nil' to disable auto-saving.
   (default 'cache)
   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-auto-save-file-location 'cache)
   #+END_SRC

** max rollbacks
   Maximum number of rollback slots to keep in the cache. (default 5)
   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-max-rollback-slots 5)
   #+END_SRC

** helm resize
   If non nil, `helm' will try to minimize the space it uses. (default nil)
   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-helm-resize nil)
   #+END_SRC

** helm no header
   if non nil, the helm header is hidden when there is only one source.
   (default nil)
   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-helm-no-header nil)
   #+END_SRC

** helm position
   define the position to display `helm', options are `bottom', `top',
   `left', or `right'. (default 'bottom)
   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-helm-position 'bottom)
   #+END_SRC

** helm use fuzzy match
   Controls fuzzy matching in helm. If set to `always', force fuzzy matching
   in all non-asynchronous sources. If set to `source', preserve individual
   source settings. Else, disable fuzzy matching in all sources.
   (default 'always)
   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-helm-use-fuzzy 'always)
   #+END_SRC

** enable paste transient state
   If non nil the paste micro-state is enabled. When enabled pressing `p`
   several times cycle between the kill ring content. (default nil)
   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-enable-paste-transient-state nil)
   #+END_SRC

** which key delay
   Which-key delay in seconds. The which-key buffer is the popup listing
   the commands bound to the current keystroke sequence. (default 0.4)
   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-which-key-delay 0.4)
   #+END_SRC

** which key position
   Which-key frame position. Possible values are `right', `bottom' and
   `right-then-bottom'. right-then-bottom tries to display the frame to the
   right; if there is insufficient space it displays it at the bottom.
   (default 'bottom)
   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-which-key-position 'bottom)
   #+END_SRC

** loading progress bar
   If non nil a progress bar is displayed when spacemacs is loading. This
   may increase the boot time on some systems and emacs builds, set it to
   nil to boost the loading time. (default t)
   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-loading-progress-bar t)
   #+END_SRC

** full screen at startup
   If non nil the frame is fullscreen when Emacs starts up. (default nil)
   (Emacs 24.4+ only)
   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-fullscreen-at-startup nil)
   #+END_SRC

** full screen use non-native
   If non nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
   Use to disable fullscreen animations in OSX. (default nil)
   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-fullscreen-use-non-native nil)
   #+END_SRC

** maximized at startup
   If non nil the frame is maximized when Emacs starts up.
   Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
   (default nil) (Emacs 24.4+ only)
   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-maximized-at-startup nil)
   #+END_SRC

** active transparency
   A value from the range (0..100), in increasing opacity, which describes
   the transparency level of a frame when it's active or selected.
   Transparency can be toggled through `toggle-transparency'. (default 90)
   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-active-transparency 90)
   #+END_SRC

** inactive transparency
   A value from the range (0..100), in increasing opacity, which describes
   the transparency level of a frame when it's inactive or deselected.
   Transparency can be toggled through `toggle-transparency'. (default 90)
   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-inactive-transparency 70)
   #+END_SRC

** show transient state title
   If non nil show the titles of transient states. (default t)
   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-show-transient-state-title t)
   #+END_SRC

** show transient state color guide
   If non nil show the color guide hint for transient state keys. (default t)
   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-show-transient-state-color-guide t)
   #+END_SRC

** mode line unicode
   If non nil unicode symbols are displayed in the mode line. (default t)
   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-mode-line-unicode-symbols t)
   #+END_SRC

** smooth scrolling
   If non nil smooth scrolling (native-scrolling) is enabled. Smooth
   scrolling overrides the default behavior of Emacs which recenters point
   when it reaches the top or bottom of the screen. (default t)
   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-smooth-scrolling t)
   #+END_SRC

** line numbers
   If non nil line numbers are turned on in all `prog-mode' and `text-mode'
   derivatives. If set to `relative', also turns on relative line numbers.
   (default nil)
   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-line-numbers t)
   #+END_SRC

** folding method
   Code folding method. Possible values are `evil' and `origami'.
   (default 'evil)
   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-folding-method 'origami)
   #+END_SRC

** smartparens strict mode
   If non-nil smartparens-strict-mode will be enabled in programming modes.
   (default nil)
   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-smartparens-strict-mode nil)
   #+END_SRC

** smart closing parenthesis
   If non-nil pressing the closing parenthesis `)' key in insert mode passes
   over any automatically added closing parenthesis, bracket, quote, etc…
   This can be temporary disabled by pressing `C-q' before `)'. (default nil)
   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-smart-closing-parenthesis t)
   #+END_SRC

** highlight delimiters
   Select a scope to highlight delimiters. Possible values are `any',
   `current', `all' or `nil'. Default is `all' (highlight any scope and
   emphasis the current one). (default 'all)
   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-highlight-delimiters 'all)
   #+END_SRC

** persistent server
   If non nil, advise quit functions to keep server open when quitting.
   (default nil)
   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-persistent-server nil)
   #+END_SRC

** search tools
   List of search tool executable names. Spacemacs uses the first installed
   tool of the list. Supported tools are `ag', `pt', `ack' and `grep'.
   (default '("ag" "pt" "ack" "grep"))
   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-search-tools '("ag" "pt" "ack" "grep"))
   #+END_SRC

** default package repository
   The default package repository used if no explicit repository has been
   specified with an installed package.
   Not used for now. (default nil)
   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-default-package-repository nil)
   #+END_SRC

** whitespace cleanup
   Delete whitespace while saving buffer. Possible values are `all'
   to aggressively delete empty line and long sequences of whitespace,
   `trailing' to delete only the whitespace at end of lines, `changed'to
   delete only whitespace for changed lines or `nil' to disable cleanup.
   (default nil)
   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-whitespace-cleanup 'trailing)
   #+END_SRC

** Closing init function
   #+BEGIN_SRC emacs-lisp
   )
   #+END_SRC

* User init function
  This provides the =dotspacemacs/user-init()= function, which can be used to
  set any variables *before* layer configuration.

   Initialization function.  This function is called at the very startup of
   Spacemacs initialization before layers configuration.  You should not put any
   user code in there besides modifying the variable values
  #+BEGIN_SRC emacs-lisp :comments org
    (defun dotspacemacs/user-init ()
  #+END_SRC

** Closing init function
    #+BEGIN_SRC emacs-lisp
    )
    #+END_SRC

* Layers function
  This provides the dotspacemacs/layers() function, which has several lists
  that control the install of layers and packages.

  Open the defun here, but be careful to ensure that it is closed at the bottom.
  Some additional details about layers can be found in
  [[file:~/.emacs.d/layers/LAYERS.org]] also, look at
  [[~/.emacs.d/layers/auto-layer.el]] for how layers are associated to files.

  #+BEGIN_SRC emacs-lisp :comments org
    (defun dotspacemacs/layers ()
  #+END_SRC

** Base distribution
   Base distribution to use. This is a layer contained in the directory
   `+distribution'. For now available distributions are
   - spacemacs-base
   - spacemacs
   (default 'spacemacs)
   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-distribution 'spacemacs)
   #+END_SRC

** Lazy install
    Lazy installation of layers (i.e. layers are installed only when a file
   with a supported type is opened). Possible values are:
   - all :: lazy install any layer that support lazy installation even the
     layers listed in =dotspacemacs-configuration-layers=
   - unused :: will lazy install only unused layers (i.e. layers  not listed
   in variable =dotspacemacs-configuration-layers= )
   - nil :: disable the lazy installation feature and you have to explicitly
     list a layer in the variable =dotspacemacs-configuration-layers= to install
     it.
   (default 'unused)

   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-enable-lazy-installation 'unused)
   #+END_SRC

*** ask first
    If non-nil then Spacemacs will ask for confirmation before installing a
    layer lazily. If non-nil layers with lazy install support are lazy
    installed.
    (default t)

    #+BEGIN_SRC emacs-lisp
    (setq-default dotspacemacs-ask-for-lazy-installation t)
    #+END_SRC

** install packages
   Defines the behaviour of Spacemacs when installing packages.
   Possible values are:
   - used-only :: installs only explicitly used packages and uninstall any
     unused packages as well as their unused dependencies.
   - used-but-keep-unused :: installs only the used packages but won't uninstall
     them if they become unused.
   - all :: installs *all* packages supported by Spacemacs and never uninstall
     them.
   (default is `used-only')

   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-install-packages 'used-only)
   #+END_SRC

** Additional paths
   List of additional paths where to look for configuration layers.
   Paths must have a trailing slash (i.e. `~/.mycontribs/')

   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-configuration-layer-path '())
   #+END_SRC

** configuration layers
   :PROPERTIES:
   :VISIBILITY: all
   :END:
   List of configuration layers to load.  This is the main way to add
   functionality to spacemacs.  Adding the layer here causes spacemacs to
   install and configure the components.  Look at =~/.emacs.d/layers= for an
   idea of the grouping and naming.

   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-configuration-layers
   '(
   #+END_SRC

*** Emacs tools
    [[file:~/.emacs.d/layers/+emacs/README.org]]
    These layers add functionality to emacs as an application and or improve on
    base packages such as =org mode=

    #+BEGIN_SRC emacs-lisp
      better-defaults   ;; emacs mode configuration
      semantic          ;; parsers and IDE type functions
      (org               ;; of course
       :variables
       org-enable-org-journal-support t
       org-enable-github-support t
       )
      outshine          ;; org-mode in comments, and org-mode navigation
      helpful           ;; more detailed help from emacs
      ibuffer           ;; grouping in the buffer list
   #+END_SRC
*** Completions
    [[file:~/.emacs.d/layers/+completion/README.org]]
    These layers add completion functions in programming languages, commands,
    and other functions across emacs

    #+BEGIN_SRC emacs-lisp
      helm              ;; use helm over ivy for emacs functions
      auto-completion   ;; tab completion, snippets
    #+END_SRC

*** Templates
    file:~/.emacs.d/layers/+templates/README.org
    Text automatically inserted in a new file.

    #+BEGIN_SRC emacs-lisp
    templates           ;; use yasnippet to fill in new files
    #+END_SRC

*** Checking
    These layers verify and validate text in the buffer.
    [[file:~/.emacs.d/layers/+checkers/README.org]]

    #+BEGIN_SRC emacs-lisp
    spell-checking    ;; flyspell and supporting packages
    syntax-checking   ;; flycheck and supporting packages
    #+END_SRC

*** Keyboard tools
    [[file:~/.emacs.d/layers/+intl/keyboard-layout/README.org]]

    #+BEGIN_SRC emacs-lisp
      keyboard-layout          ;; help spacemacs do dvorak
    #+END_SRC

*** Programming languages
    [[file:~/emacs.d/layers/+lang]] each language has it's own README.org
    Syntax highlighting, formatting, convenience functions for programming
    languages and file types

    #+BEGIN_SRC emacs-lisp
      c-c++
      emacs-lisp
      shell-scripts
      yaml
      ruby
      lua
      plantuml
      javascript
      html
      latex
      markdown
      python
      windows-scripts
    #+END_SRC

*** Source control
    [[file:~/.emacs.d/layers/+source-control]] Tools have their own README.org
    As the name implies, source control tools such as git, etc.

    #+BEGIN_SRC emacs-lisp
      version-control
      git
      github
    #+END_SRC

*** Tags
    [[file:~/.emacs.d/layers/+tags]] Tools have their own README.org
    Source code tag utilities

    #+BEGIN_SRC emacs-lisp
    cscope
    gtags
    #+END_SRC

*** Coloring text
    [[file:~/.emacs.d/layers/+themes]]
    Themes and color naming

    #+BEGIN_SRC emacs-lisp
      themes-megapack
      colors
    #+END_SRC

*** File trees and dired replacements
    [[file:~/.emacs.d/layers/+filetree/treemacs/README.org]]

    #+BEGIN_SRC emacs-lisp
    treemacs
    #+END_SRC

*** Tools
    [[file:~/.emacs.d/layers/+tools]] A mixed bag of tools for emacs, and tools for
    building things, like compiler integration, etc.
**** Emacs tools

    #+BEGIN_SRC emacs-lisp
      deft
      pdf
      cmake
      meson
    #+END_SRC

**** System tools

    #+BEGIN_SRC emacs-lisp
      ansible
      terraform
      docker
      kubernetes
      xclipboard
    #+END_SRC

*** vi emulation - integration
    [[file:~/.emacs.d/layers/+vim]] Using evil mode (making emacs modal like vim,
     it's kinda cool).

    #+BEGIN_SRC emacs-lisp
      evil-commentary
      evil-snipe
    #+END_SRC

*** Closing configuration layers

    #+BEGIN_SRC emacs-lisp
    ))
    #+END_SRC

** additional packages
   List of additional packages that will be installed without being
   wrapped in a layer.  Items here are good candidates for creating a layer.

   #+BEGIN_SRC emacs-lisp
     (setq-default dotspacemacs-additional-packages
     '(
   #+END_SRC

*** Packages

    #+BEGIN_SRC emacs-lisp
       drag-stuff
       move-text
       org-ql
       org-alert
       org-attach-screenshot
       calfw
       calfw-org
    #+END_SRC

*** Closing additional packages

    #+BEGIN_SRC emacs-lisp
    ))
    #+END_SRC

** frozen packages
   A list of packages that cannot be updated.  If an older version of a package
    is desired, you can freeze the version here

    #+BEGIN_SRC emacs-lisp
    (setq dotspacemacs-frozen-packages '())
    #+END_SRC

** excluded packages
   A list of packages that will not be installed and loaded.

   #+BEGIN_SRC emacs-lisp
   (setq-default dotspacemacs-excluded-packages
    '(
   #+END_SRC

*** Packages

    #+BEGIN_SRC emacs-lisp
      org-projectile
   #+END_SRC

*** Closing excluded packages

   #+BEGIN_SRC emacs-lisp
     ))
   #+END_SRC

** Close the layers function

   #+BEGIN_SRC emacs-lisp
   )
   #+END_SRC

* User config function
  This provides the =dotspacemacs/user-config= function.
  Open the defun here, but be careful to ensure that it is closed at the bottom.

  This function is loaded after the =dotspacemacs/layers= function.  Any custom
  settings for the layer, or the included packages should be done here.

  *note* that [[~/.emacs.d/layers/auto-layer.el]] does some file association for
  layers.

  #+BEGIN_SRC emacs-lisp :comments org
    (defun dotspacemacs/user-config ()
  #+END_SRC

** Configuration Layers
    I want to keep this hierarchy and the layers hierarchy in sync as much as
   possible.  I think that'll make it easier to keep track of the load, and setup
   of each package.
*** Emacs tools
**** better-defaults
     This package configures some features in spacemacs emacs mode (as opposed to
     the evil mode)
     Ctrl-A and Ctrl-E will move to the beginning/end of the code line, vice the
     text line

     #+BEGIN_SRC emacs-lisp
     (setq  better-defaults-move-to-beginning-of-code-first t
            better-defaults-move-to-end-of-code-first t)
     #+END_SRC

**** ibuffer
     Organize the buffer list

     #+BEGIN_SRC emacs-lisp
     (setq ibuffer-group-buffers-by 'projects)
     #+END_SRC

**** org-mode
     :PROPERTIES:
     :VISIBILITY: children
     :END:
***** eval after load first
      We need to wrap these things so that the newer version of org is loaded first

      #+BEGIN_SRC emacs-lisp
      (with-eval-after-load 'org
      #+END_SRC

***** org modules and exporters
       Org mode is a system with many add-ons and features.  The Export function has
       many more options than what is set as default

       #+BEGIN_SRC emacs-lisp
       (setq org-export-backends
        '(ascii
          beamer
          html
          icalendar
          latex
          md
          odt
          org
          taskjuggler
          )
       )
       #+END_SRC

       Set up color source code blocks in latex

       #+BEGIN_SRC emacs-lisp
         (require 'ox-latex)
         (add-to-list 'org-latex-packages-alist '("" "minted"))
         (setq org-export-latex-listings 'minted)
         (setq org-src-fontify-natively t)
       #+END_SRC

***** org mode hooks
      things to enable based on the file type

      #+BEGIN_SRC emacs-lisp
      (add-hook 'org-mode-hook 'turn-on-auto-fill)
      (add-hook 'org-mode-hook 'flyspell-mode)
      (add-hook 'org-mode-hook (lambda () (hl-todo-mode -1) nil))
      #+END_SRC

***** org todo

      #+BEGIN_SRC emacs-lisp
      (setq org-todo-keywords '(
              (sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
      ))
      (setq org-todo-keyword-faces (quote (
                            ("TODO" :foreground "brown"      :weight bold)
                            ("NEXT" :foreground "tomato"     :weight bold)
                            ("DONE" :foreground "olive drab" :weight bold)
      )))
      #+END_SRC

      Ensure that TODOs don't get marked as DONE while child items are open even if
      its checkboxes

      #+BEGIN_SRC emacs-lisp
        (setq org-enforce-todo-dependencies t)
        (setq org-enforce-todo-checkbox-dependencies t)
        (setq org-agenda-dim-blocked-tasks nil)
      #+END_SRC

***** org habits

      #+BEGIN_SRC emacs-lisp
      (setq org-habit-show-habits-only-for-today nil)
      #+END_SRC

***** org effort estimates
      By assigning effort to tasks, i am able to filter out tasks that i dont have
      time to complete right now

      #+BEGIN_SRC emacs-lisp
        (setq org-global-properties
              (quote (
                      ("Effort_ALL" . "0:15 0:30 1:00 2:00 4:00 1d 5d")
                      )))
      #+END_SRC

***** org stuck-projects
      first, a project is loosely defined as an item that is:
      - A TODO item
      - not on the "someday maybe" list
      - not waiting for something else
      - not explicitly set to ignore
      - not in review
      - not scheduled
      Next
      - if it has a TODO item its not stuck (the lower one may be though)
      - if it has a NEXT item its not stuck

      #+BEGIN_SRC emacs-lisp
      (setq org-stuck-projects
      '(
         ;; the tags-todo search that identifies projects
         "-someday-wait-IGNORE-REVIEW/TODO"
         ;; if these TODO words are found, it is not stuck
         ("NEXT")
         ;; if these tags are found in the subitems, it is not stuck
         nil
         ;; a regular expression that matches non stuck
         ""
        )
       )
      #+END_SRC

***** org tags
      Tags are used for two major functions; filtering and searching

      #+BEGIN_SRC emacs-lisp
      ;; Replace org-set-tags with org-set-tags-command in keybinding
      (spacemacs/set-leader-keys-for-major-mode 'org-mode ":" 'org-set-tags-command)
      (setq org-tags-column -120)

      (setq org-tag-alist '(
       ;;   Next Action Contexts
            ("comms"    .   ?c)
            ("web"      .   ?w)
            ("cac"      .   ?a)
            ("office"   .   ?o)
            ("home"     .   ?h)
            ("mcen"     .   ?m)
            ("vault"    .   ?v)
            ("imefdm"   .   ?i)
       ;;   Meetings and People
            ("staff"    .   ?t)
            ("spe"      .   ?P)
            ("col"      .   ?C)
       ;;   Categories and flags
            ("someday"  .   ?s)
            ("wait"     .   ?W)
            ("read"     .   ?r)
            ("fifo"     .   ?f)
            ("journal"  .   ?j)
            ("REVIEW"   .   ?R)
            ("pp"       .   ?p)
            ))

        (setq org-tags-exclude-from-inheritance '(
            "read"
            "REVIEW"
            "wait"
            "fifo"
            "journal"
            "pp"
            ))


      #+END_SRC

***** org journal
      A journal management system using org.  It's enabled in
     [[*Emacs tools][Emacs tools configuration layer]]

      #+BEGIN_SRC emacs-lisp
        (setq org-enable-org-journal-support t)
        (setq org-journal-dir "~/org/journal/"
              org-journal-file-format "%YYYY-%MM-%dd-Www"
              org-journal-date-prefix "#+TITLE: "
              org-journal-date-format "%A, %B %d %YYYY"
              org-journal-time-prefix "* "
              org-journal-time-format "%bh:%mm")
      #+END_SRC

***** org clock

      #+BEGIN_SRC emacs-lisp
      (org-clock-persistence-insinuate)
      ;; the number of clock tasks to remember in history
      (setq org-clock-history-length 36)
      ;;  resume clock when clocking into task with open clock.
      ;; When clocking into a task with a clock entry which has not been closed,
      ;; the clock can be resumed from that point
      (setq org-clock-in-resume t)
      ;; when set to t , both the running clock and entire history are saved when
      ;; emacs closes and resume when emacs restarts
      (setq org-clock-persist t)
      ;; put clock times into LOGBOOK drawer
      (setq org-clock-into-drawer t)
      ;; clock out when the task is marked DONE
      (setq org-clock-out-when-done t)
      ;; set the mode line clock display
      (setq mode-line-org-clock t)
      (setq spaceline-org-clock-p t)
      #+END_SRC

***** org protocol
      Almost the best feature of org mode.  Enabling org-protocol lets me send
      clips to org from the browser

     #+BEGIN_SRC emacs-lisp
       (require 'org-protocol)
    #+END_SRC

***** Agenda files
      list of agenda files managed in the org directory.

      This will load all org files in the org directory
      into two lists :
      - First are the files required for the org-agenda
        - this should be =org-agenda-files=
      - The second is the directories used for search such as org-occur
        - this should be =org-agenda-text-search-extra-files=

      Next , because org only makes refile-targets from the
      =org-agenda-files= list we need to adjust that to include
      the Reference folder as well

      #+BEGIN_SRC emacs-lisp
        ; set the default directory for some org functionality
        (setq org-directory "~/org")
        (setq org-agenda-files (file-expand-wildcards "~/org/*.org"))
        (setq org-agenda-text-search-extra-files (file-expand-wildcards "~/org/notes/*.org"))
        (setq tra:all-org-files ( append
              org-agenda-files
              org-agenda-text-search-extra-files)
        )
      #+END_SRC

***** Refile targets

      #+BEGIN_SRC emacs-lisp
      (setq org-refile-targets
          (quote ((nil :maxlevel . 5)
              (tra:all-org-files :maxlevel . 5)
          ))
      )
      (setq org-refile-use-outline-path 'file)
      (setq org-outline-path-complete-in-steps nil)
      (setq org-refile-allow-creating-parent-nodes 'confirm)
      (setq org-completion-use-ido t)
      #+END_SRC

***** Agenda views

      #+BEGIN_SRC emacs-lisp
        (setq org-agenda-skip-scheduled-if-done 't)
        (setq org-log-into-drawer 't)
        (setq org-agenda-leading-zero 't)
        (setq org-agenda-custom-commands '())
        (setq org-tags-list-match-sublevels 'indented)
      #+END_SRC

      A stuck project is:
      - a TODO that has no NEXT or TODOs
      - is not scheduled for later
      - not tagged with one of the ignored tags

      #+BEGIN_SRC emacs-lisp
        (add-to-list 'org-agenda-custom-commands
           '("K" "Stuck Projects"
                ((org-ql-block '(and
                                (todo "TODO")
                                (not (tags "wait" "someday" "calendar"))
                                (not (scheduled))
                                (children ( todo "DONE"))
                                (not (children (todo "NEXT")))
                                (not (children (todo "TODO")))
                                (not (children (scheduled)))
                               )
                              ((org-ql-block-header "Potential close - A TODO with only DONE tasks"))
                              )
                  (org-ql-block '(and
                                  (todo "TODO")
                                  (not (tags "wait" "someday" "calendar"))
                                  (not (scheduled))
                                  (or
                                   (children (todo "TODO"))
                                   (children (todo "DONE"))
                                  )
                                  (not (descendants (todo "NEXT")))
                                  (not (children (scheduled)))
                                 )
                                ((org-ql-block-header "Needs Actions Defined - A TODO with only TODO or DONE tasks"))
                                )
                  (org-ql-block '(and
                                  (todo "DONE")
                                  (not (tags "wait" "someday" "calendar"))
                                  (not (scheduled))
                                  (or
                                   (children (todo "TODO"))
                                   (children (todo "NEXT"))
                                   )
                                  (not (children (scheduled)))
                                  )
                                ((org-ql-block-header "Missed Actions - A DONE with active TODO or NEXT"))
                                )
                 (org-ql-block '(and
                                  (todo "NEXT")
                                  (not (tags "wait" "someday" "calendar"))
                                  (not (scheduled))
                                  (children (todo))
                                 )
                                ((org-ql-block-header "Mislabled Actions - A NEXT with children"))
                                )
                   )
               )
               )
      #+END_SRC


      The gtd project list.  Any TODO that has NEXT actions assigned to it

      #+BEGIN_SRC emacs-lisp
        (add-to-list 'org-agenda-custom-commands
           '("p" "The Project List"
                ((org-ql-block '(and
                                  (todo "TODO")
                                  (not (tags "wait" "someday"))
                                  (not (scheduled))
                                  (children (todo "NEXT"))
                                  )
                                ((org-ql-block-header "The Project List"))
                   )
                 )
                (
                 (org-agenda-with-colors t)
                 (org-agenda-remove-tags t)
                 (ps-print-color-p 'black-white)
                 (ps-paper-type 'letter)
                 (ps-top-margin 3)
                 (ps-bottom-margin 3)
                 (ps-left-margin 3)
                 (ps-right-margin 3)
                 (ps-font-size 8.0)
                 (ps-print-header nil)
                 (ps-landscape-mode t)
                 (ps-number-of-columns 2)
                 )
                ( "~/paperPlanner/Agenda-Export/Page-03.TheProjectList.txt"
                  "~/paperPlanner/Agenda-Export/Page-03.TheProjectList.ps")
                 )
           )
       #+END_SRC

      This is an individual project 'vertical' view.  Meaning, it will run down all
      of the TODO, NEXT and DONE vertically, and print them hierarchically.  This is how we
      can print out one project per report/file.

      #+BEGIN_SRC emacs-lisp
        (add-to-list 'org-agenda-custom-commands
                '("v" "Vertical view of a project"
                  ((tags-todo "-someday-WAIT/!")
                     )
                    (
                     (org-agenda-with-colors t)
                     (org-tags-match-list-sublevels 'indented)
                     )
                    ("~/paperPlanner/Agenda-Export/Page-04.Vertical-ProjectView.ps")
                    )
                )
      #+END_SRC

      Next Actions, all contexts in one long list, un-categorized at the bottom

      #+BEGIN_SRC emacs-lisp
         (add-to-list 'org-agenda-custom-commands
            '("Na" "Next Actions"
                 ((org-ql-block '(and
                                  (todo "NEXT")
                                  (tags "comms")
                                  (not (tags "wait" "someday"))
                                  (not (scheduled))
                                  )
                                ((org-ql-block-header "Communications"))
                                )
                  (org-ql-block '(and
                                  (todo "NEXT")
                                  (tags "web")
                                  (not (tags "wait" "someday"))
                                  (not (scheduled))
                                  )
                                ((org-ql-block-header "Web"))
                                )
                   (org-ql-block '(and
                                  (todo "NEXT")
                                  (tags "cac")
                                  (not (tags "wait" "someday"))
                                  (not (scheduled))
                                  )
                                ((org-ql-block-header "DoD Websites"))
                                )
                  (org-ql-block '(and
                                  (todo "NEXT")
                                  (tags "imefdm")
                                  (not (tags "wait" "someday"))
                                  (not (scheduled))
                                  )
                                ((org-ql-block-header "Tactical Network"))
                                )
                   (org-ql-block '(and
                                  (todo "NEXT")
                                  (tags "mcen")
                                  (not (tags "wait" "someday"))
                                  (not (scheduled))
                                  )
                                ((org-ql-block-header "MCEN"))
                                )
                    (org-ql-block '(and
                                  (todo "NEXT")
                                  (tags "laptop")
                                  (not (tags "wait" "someday"))
                                  (not (scheduled))
                                  )
                                ((org-ql-block-header "Laptop (system)"))
                                )
                  (org-ql-block '(and
                                  (todo "NEXT")
                                  (tags "home")
                                  (not (tags "wait" "someday"))
                                  (not (scheduled))
                                  )
                                ((org-ql-block-header "At Home"))
                                )
                    (org-ql-block '(and
                                  (todo "NEXT")
                                  (tags "office")
                                  (not (tags "wait" "someday"))
                                  (not (scheduled))
                                  )
                                ((org-ql-block-header "At the Office"))
                                )
                 (org-ql-block '(and
                                  (todo "NEXT")
                                  (tags "spe")
                                  (not (tags "wait" "someday"))
                                  (not (scheduled))
                                  )
                                ((org-ql-block-header "The SPE Roundtable"))
                                )
                    (org-ql-block '(and
                                  (todo "NEXT")
                                  (not (tags "comm" "web" "cac" "imefdm" "mcen"
                                             "laptop" "spe" "home" "office" "wait" "someday"))
                                  (not (scheduled))
                                  )
                                ((org-ql-block-header "Uncategorized Next Actions"))
                                )
                )))
      #+END_SRC

      Looking for tasks that could be NEXT actions

      #+BEGIN_SRC emacs-lisp
      (add-to-list 'org-agenda-custom-commands
               '("Np" "Potential Next Actions"
               ((org-ql-block '(and
                                (todo "TODO")
                                (not (tags "someday" "calendar"))
                                (not (scheduled))
                                (not (children (todo)))
                                )
                              ((org-ql-block-header "Potential Next Actions"))
                              )
                )
               ))
      #+END_SRC

      Next actions grouped by Effort

      #+BEGIN_SRC emacs-lisp
        (add-to-list 'org-agenda-custom-commands
           '("Ne" "Next actions by Effort"
                   ((org-ql-block '(and
                                    (todo "NEXT")
                                    (not (tags "someday" "calendar"))
                                    (not (scheduled))
                                    (property "Effort" "0:15")
                                    )
                                  ((org-ql-block-header "15 Min Next actions"))
                                  )

                   (org-ql-block '(and
                                    (todo "NEXT")
                                    (not (tags "someday" "calendar"))
                                    (not (scheduled))
                                    (property "Effort" "0:30")
                                    )
                                  ((org-ql-block-header "30 Min Next actions"))
                                  )
                   (org-ql-block '(and
                                    (todo "NEXT")
                                    (not (tags "someday" "calendar"))
                                    (not (scheduled))
                                    (property "Effort" "1:00")
                                    )
                                  ((org-ql-block-header "One hour Next actions"))
                                  )
                    (org-ql-block '(and
                                    (todo "NEXT")
                                    (not (tags "someday" "calendar"))
                                    (not (scheduled))
                                    (or
                                     (property "Effort" "2:00")
                                     (property "Effort" "4:00")
                                    )
                                   )
                                  ((org-ql-block-header "Long Next actions"))
                                  )
                   (org-ql-block '(and
                                    (todo "NEXT")
                                    (not (tags "someday" "calendar"))
                                    (not (scheduled))
                                    (not (property "Effort"))
                                   )
                                  ((org-ql-block-header "Next actions with no Effort Assigned"))
                                  )
                   ))
           )
      #+END_SRC

      A column view of NEXT actions in order to set or view effort and clocked time

      #+BEGIN_SRC emacs-lisp
        (add-to-list 'org-agenda-custom-commands
           '("Nt" "Time Management"
               ((org-ql-block '(and
                                  (todo "NEXT")
                                  (not (tags "someday" "calendar"))
                                  (not (scheduled))
                                  (not (children (todo)))
                                  )
                                ((org-ql-block-header "Time Management"))
                                )
                  )
               ((org-agenda-overriding-columns-format "%5TODO %4Effort %4Clocksum %70ITEM(Next Action) %10TAGS")
               (org-agenda-view-columns-initially t))
               ))
      #+END_SRC

      The gtd waiting for list

      #+BEGIN_SRC emacs-lisp
      (add-to-list 'org-agenda-custom-commands
         '("w" "Waiting For"
             ((org-ql-block '(and
                                (tags "wait")
                                (not (tags "someday"))
                                (not (scheduled))
                                )
                              ((org-ql-block-header "Waiting For"))
                              )
                )
               ))
      #+END_SRC

      Anything that i've tagged to review

      #+BEGIN_SRC emacs-lisp
      (add-to-list 'org-agenda-custom-commands
         '("Rb" "Brief Review"
             ((org-ql-block '(and
                                (tags "REVIEW")
                                )
                              )
                )
               )
              )
      #+END_SRC

      #+BEGIN_SRC emacs-lisp
        (add-to-list 'org-agenda-custom-commands
           '("Rd" "Detailed Review"
             ((org-ql-block '(and
                                  (todo)
                                  (not (tags "someday"))
                                  (not (scheduled))
                                  (tags "REVIEW")
                                  )
                            ((org-ql-block-header "Tasks marked for Review"))
                            )
              (org-ql-block '(and
                              (not (todo))
                              (not (todo "DONE"))
                              (not (tags "someday"))
                              (not (scheduled))
                              (tags "REVIEW")
                              )
                            ((org-ql-block-header "Items marked for Review"))
                            )
             (org-ql-block '(deadline :from today :to 7)
                            ((org-ql-block-header "Upcoming deadlines this week"))
                            )

             (org-ql-block '(scheduled :from today :to 7)
                            ((org-ql-block-header "Tasks scheduled for this week"))
                            )

              (org-ql-block '(clocked :from -7)
                            ((org-ql-block-header "Tasks worked on last week"))
                            )
                  )
                 )
                )
      #+END_SRC

      An agenda view that looks for entries that have not yet been marked as synced
      using the tag 'pp' to denote "paper planner"

      #+BEGIN_SRC emacs-lisp
        (add-to-list 'org-agenda-custom-commands
                     '("Rs" "Items that need to be synced with paper"
                       ((org-ql-block '(and
                                        (todo "TODO")
                                        (children (todo "NEXT"))
                                        (not (tags "pp" "someday"))
                                        )
                                      ((org-ql-block-header "Project List Items"))
                                      )
                        (org-ql-block '(and
                                        (todo "NEXT")
                                        (not (tags "pp" "someday"))
                                        )
                                      ((org-ql-block-header "Next Actions"))
                                      )
                        (org-ql-block '(and
                                        (or
                                         (scheduled :from today :to 7)
                                         (deadline :from today :to 7)
                                         (ts-active :from today :to 28)
                                        )
                                        (not (tags "pp"))
                                        )
                                      ((org-ql-block-header "calendar items"))
                                      )
                        )
                       )
                     )
      #+END_SRC

      I want the agenda to show the time grid for the whole day, not just a
      condensed 'agenda' view

      #+BEGIN_SRC emacs-lisp
        (setq org-agenda-time-grid (quote
        ((daily today remove-match)
         (0600 0630 0700 0730 0800 0830 0900 0930 1000 1030
          1100 1130 1200 1230 1300 1330 1400 1430 1500 1530
          1600 1630 1700 1730 1800 1830 1900 1930 2000 2030)
         "......" "----------------")))
      #+END_SRC

***** archive settings
      I organized all of the archived org items under a date tree, but
      preserve the original file name.  This marks things as done as they are
      archived if not already.

      #+BEGIN_SRC emacs-lisp
      (setq org-archive-location "~/org/.archive/%s_archive::datetree/")
      (setq org-archive-save-context-info '(time file olpath category todo itags))
      (setq org-archive-mark-done t)
      #+END_SRC

***** Publish projects
      Setup the initial alist so that downstream SRC blocks can add to

      #+BEGIN_SRC emacs-lisp
      (setq org-publish-project-alist '())
      #+END_SRC

      org-info is a javascript "plugin" for html exported org files that adds
      several "nice" features for navigating
      #+BEGIN_SRC emacs-lisp
        (add-to-list 'org-publish-project-alist
                     '("org-info"
                       :base-directory "/home/aldrichtr/org/org-info/"
                       :base-extension "js"
                       :publishing-directory "/var/www/www.timforge.local/htdocs/styles"
                       :publishing-function org-publish-attachment
                       )
                     )
      #+END_SRC

      Any style sheets that I've created

      #+BEGIN_SRC emacs-lisp
        (add-to-list 'org-publish-project-alist
                     '("styles"
                      :base-directory "/home/aldrichtr/org/styles/"
                      :base-extension "css"
                      :publishing-directory "/var/www/www.timforge.local/htdocs/styles"
                      :publishing-function org-publish-attachment
                      )
                     )
      #+END_SRC

      #+BEGIN_SRC emacs-lisp
        (add-to-list 'org-publish-project-alist
                     '("org files"
                       :base-directory "/home/aldrichtr/org/"
                       :base-extension "org"
                       :publishing-directory "/var/www/www.timforge.local/htdocs"
                       :recursive t
                       :makeindex t
                       :auto-sitemap t
                       :sitemap-filename "default.org"
                       :publishing-function org-html-publish-to-html
                       )
                     )
      #+END_SRC

***** capture templates

      #+BEGIN_SRC emacs-lisp :yes
                 (setq org-capture-templates
                    '(
                      ("a" "Appointment" entry
                       (file+headline "~/org/calendar.org" "Appointments")
                       "* %?\n  %T")
                      ("o" "Note" entry
                       (file "~/org/review.org" )
                       "* %? "
                       :kill-buffer t)
                      ("j" "Journal entry" entry
                       (file "~/org/journal.org" )
                       "* %<%Y-%m-%d> %? :journal:REVIEW: \n %u"
                       :prepend t :clock-in t :clock-resume t)
                      ;;; When typing 'w' in firefox
                      ;;; |%:description | %^{TITLE} | title of the web-page |
                      ;;; |%:link        | %c        | URL                   |
                      ;;; |%:initial     | %i        | selected text         |
                      ("w" "Web clipping" entry
                       (file "~/org/review.org" )
                       "* %:description%? :web:\n  %:initial\n  Source :\n %:link"
                       :immediate-finish t
                       )
                      ("W" "capture web clip with note" entry
                       (file "~/org/review.org" )
                       "* %:description%? :web:\n  %:initial\n  Source :\n %:link"
                       )
                      ( "t" "Add a todo item and close" entry
                        (file "~/org/review.org")
                        "* TODO %i\n  %U\n"
                        :immediate-finish t
                        :kill-buffer t)
                      ( "T" "Add ticket to database (with link)" entry
                        (file+headline "~/org/tickets.org" "Backlog")
                        "* NEW %?\n%u\n\n  Source :\n %F:%(with-current-buffer
                          (org-capture-get :original-buffer)
                          (number-to-string (line-number-at-pos)))"
                        :prepend t )
                      )
                    )
      #+END_SRC

***** Turn on alerts based on the agenda schedule

      #+BEGIN_SRC emacs-lisp
      ;; the appointment notification facility
      (setq
        appt-message-warning-time 15 ;; warn 15 min in advance
        appt-display-mode-line t     ;; show in the modeline
        appt-display-format 'window) ;; use our func
      (appt-activate 1)              ;; active appt (appointment notification)
      (display-time)                 ;; time display is required for this...

      ;; update appt:
      ;; - when starting emacs
      (org-agenda-to-appt)
      ;; - each time agenda opened
      (add-hook 'org-finalize-agenda-hook 'org-agenda-to-appt)
      ;;
      (run-at-time "12:05am" (* 24 3600) 'org-agenda-to-appt)
      #+END_SRC

      #+BEGIN_SRC emacs-lisp
        (require 'org-alert)
        (setq alert-default-style 'libnotify)
        (org-alert-enable)
      #+END_SRC

***** Export to task juggler

      #+BEGIN_SRC emacs-lisp
        (require 'ox-taskjuggler)
        (setq org-taskjuggler-project-tag "tjp")
        (setq org-taskjuggler-reports-directory "~/org/reports")
      #+END_SRC

      Modify the default report to provide a more reasonable report.

      #+BEGIN_SRC emacs-lisp
      (setq org-taskjuggler-default-project-duration 980)
      (setq org-taskjuggler-default-reports
        '("textreport report \"Plan\" {
        formats html
        header '== <-query attribute=\"name\"-> =='

        center -8<-
          [#Plan Plan] | [#Resource_Allocation Resource Allocation]
          ----
          === Plan ===
          <[report id=\"plan\"]>
          ----
          === Resource Allocation ===
          <[report id=\"resourceGraph\"]>
        ->8-
      }

      # A traditional Gantt chart with a project overview.
      taskreport plan \"\" {
        headline \"Project Plan\"
        columns bsi, name, complete, start, end, effort, chart
      # rollup completed tasks
      #  rolluptask plan.end < ${now}
        loadunit shortauto
        hideresource 1
      }

      # A graph showing resource allocation. It identifies whether each
      # resource is under- or over-allocated for.
      resourcereport resourceGraph \"\" {
        headline \"Resource Allocation Graph\"
        columns no, name, effort, weekly
        loadunit shortauto
        hidetask ~(isleaf() & isleaf_())
        sorttasks plan.start.up
      }"))
      #+END_SRC

***** close eval

      #+BEGIN_SRC emacs-lisp
      )
      #+END_SRC

***** auto-saving
      I want all org files to be saved, both as part of autosave, and also
      following a refile, or capture

      #+BEGIN_SRC emacs-lisp
      (add-hook 'auto-save-hook 'org-save-all-org-buffers)
      #+END_SRC

***** elgantt
      this is an external git repo with a very interesting tool.  Its an
      interactive gantt view of your agenda

      #+BEGIN_SRC emacs-lisp
        (add-to-list 'load-path "~/.spacemacs.d/external/elgantt/")
        (require 'elgantt)
        (setq elgantt-timestamps-to-display '(deadline timestamp scheduled timestamp-range))
        (setq elgantt-draw-overarching-headers 't)
      #+END_SRC

*** Completions
**** yasnippet
     An amazing snippet utility.

     #+BEGIN_SRC emacs-lisp
     (setq yas-snippet-dirs
         '("~/.emacs.d/snippets"
           "~/.spacemacs.d/snippets"
           ))
     (yas-global-mode 1)
     (setq auto-completion-enable-snippets-in-popup t)
     (setq auto-completion-enable-sort-by-usage t)
     (global-company-mode)
     #+END_SRC

*** Templates
    Insert yasnippets into new files

    #+BEGIN_SRC emacs-lisp
    (setq templates-private-directory "~/.spacemacs.d/templates/")
    #+END_SRC

*** Checking
    flycheck and flyspell
*** Keyboard tools
    Tell spacemacs that I want to use the dvorak layout, so modify some of the
    keys (mostly vi-style keys)

    #+BEGIN_SRC emacs-lisp
      (setq kl-layout 'dvorak
        kl-disabled-configurations '(
           helm
           org
           magit
           twittering-mode))
    #+END_SRC

*** Programming languages
**** c-c++
    the following section sets up my preferred formatting style

    #+BEGIN_SRC emacs-lisp
    (setq c-basic-offset 4)
    (defconst my-c-style
      '((c-tab-always-indent        . t)
        (c-comment-only-line-offset . 0)
        (c-hanging-braces-alist     . ((substatement-open after)
                                       (brace-list-open)))
        (c-hanging-colons-alist     . ((member-init-intro before)
                                       (inher-intro)
                                       (case-label after)
                                       (label after)
                                       (access-label after)))
        (c-cleanup-list             . (scope-operator
                                       empty-defun-braces
                                       defun-close-semi))
        (c-offsets-alist            . ((arglist-close . c-lineup-arglist)
                                       (substatement-open . 0)
                                       (case-label        . 4)
                                       (block-open        . 0)
                                       (namespace-open    . 0)
                                       (innamespace       . 0)
                                       (knr-argdecl-intro . -)))
        (c-echo-syntactic-information-p . t)
        )
        "My C Programming Style")

     ;; offset customizations not in my-c-style
     (setq c-offsets-alist '((member-init-intro . ++)))

     ;; Customizations for all modes in CC Mode.
     (defun my-c-mode-common-hook ()
      ;; add my personal style and set it for the current buffer
      (c-add-style "PERSONAL" my-c-style t)
      ;; other customizations
      (setq tab-width 4
            ;; this will make sure spaces are used instead of tabs
            indent-tabs-mode nil)
      ;; we like auto-newline and hungry-delete
        (c-toggle-auto-hungry-state 1)
      )
    (add-hook 'c-mode-common-hook 'my-c-mode-common-hook)
    (add-hook 'c++-mode-hook 'my-c-mode-common-hook)
    #+END_SRC

**** Plantuml
     plantuml is a java applet that can convert text into a UML diagram

     #+BEGIN_SRC emacs-lisp
     (setq org-plantuml-jar-path "/usr/share/plantuml/plantuml.jar")
     #+END_SRC

*** Source control
*** Tags
*** Coloring text
*** File trees and dired replacements
**** treemacs

     #+BEGIN_SRC emacs-lisp
       (setq treemacs-use-follow-mode 'tag
       treemacs-use-filewatch-mode t
       treemacs-use-git-mode 'deferred
       treemacs-use-all-the-icons-theme t)
     #+END_SRC

*** Tools
**** deft

     #+BEGIN_SRC emacs-lisp
     (setq deft-use-filename-as-title t)
     ;; with this tell deft to use the search
     ;; term as the filename if a new file is created
     (setq deft-use-filter-string-for-filename t)
     (setq deft-file-naming-rules
           '((noslash . "-")
             (nospace . "-")
             (case-fn . downcase)))
     (setq deft-text-mode 'org-mode)
     (setq deft-org-mode-title-prefix t)
     (setq deft-directory "~/org/notes")
     (setq deft-archive-directory "../.archive/")
     (setq deft-extensions '("org"))
     (setq deft-default-extension "org")
     (setq deft-auto-save-interval 30)
     #+END_SRC

*** vi emulation
** Additional packages
   These elpa packages don't have a spacemacs layer associated with them yet.
*** calfw

    #+BEGIN_SRC emacs-lisp
    (require 'calfw)
    (require 'calfw-org)
    (setq calendar-week-start-day 1) ;; monday
    #+END_SRC

** Remind files
   a syntax highlighting library for remind files

   #+BEGIN_SRC emacs-lisp
   (add-to-list 'load-path "~/.spacemacs.d/external/remind-mode.el")
   (add-to-list 'auto-mode-alist '("\\.rem\\'" . remind-mode))
   #+END_SRC

** dotspacemacs config
*** powerline

    #+BEGIN_SRC emacs-lisp
    (setq powerline-default-separator 'contour)
    #+END_SRC

** close user-config function

    #+BEGIN_SRC emacs-lisp
    )
    #+END_SRC

* User functions
  Any custom functions (or advice to functions) get added after all the
  spacemacs initialization is done.
** review
   Simple function to open the review file.

   #+BEGIN_SRC emacs-lisp
   (defun review ()
     (interactive)
     (find-file "~/org/review.org")
    )
   #+END_SRC

** gtd
   convenience function to open the main org file

   #+BEGIN_SRC emacs-lisp
   (defun gtd ()
   (interactive)
   (find-file "~/org/planner.org")
   )
   #+END_SRC

** rebuild org-agenda files
   I want to be able to reload the list of refile targets if I add files
   #+BEGIN_SRC emacs-lisp
     (defun rebuild-agenda-files ()
       (interactive)
       (setq org-agenda-files (file-expand-wildcards "~/org/*.org"))
       (setq org-agenda-text-search-extra-files (file-expand-wildcards "~/org/notes/*.org"))
       (setq tra:all-org-files ( append
                                 org-agenda-files
                                 org-agenda-text-search-extra-files)
             )
       )
   #+END_SRC


** Source cleanup after tangle
   After tangling a file, indent the code
   #+BEGIN_SRC emacs-lisp
     (defun tra/source-cleanup ()
       (indent-region (point-min) (point-max))
       (save-buffer)
     )

     (add-hook 'org-babel-post-tangle-hook 'tra/source-cleanup)
   #+END_SRC
** Save org buffers often
   I dont want to lose any info from org mode, and when I refile, a lot of org
   buffers end up open.  This saves them at regular intervals.

   #+BEGIN_SRC emacs-lisp
   (add-hook 'auto-save-hook 'org-save-all-org-buffers)
   #+END_SRC

** Capture from the command line or from org-protocol
   I want the capture from external programs to close the frame after it is done

   #+BEGIN_SRC emacs-lisp
       (add-hook 'org-capture-mode-hook 'delete-other-windows)

     (defadvice org-capture-finalize (after delete-capture-frame activate)
       "Advise capture-finalize to close the frame if it is the capture frame"
       (if (equal "capture" (frame-parameter nil 'name))
           (delete-frame)))

     (defadvice org-capture-destroy
         (after delete-capture-frame activate)
       "Advise capture-destroy to close the frame"
       (if (equal "capture" (frame-parameter nil 'name))
           (delete-frame)))

     (defun make-capture-frame ()
       "Create a new frame and run org-capture"
       (interactive)
       (make-frame-on-display ":0" '((name . "capture")
                     (width . 120)
                     (height . 20)))
       (select-frame-by-name "capture")
       (org-capture nil "o")
       )

   #+END_SRC

** jump into a deft search from the command line

   #+BEGIN_SRC emacs-lisp
   (defun make-deft-frame ()
   "Create a new frame and run deft"
   (interactive)
   (make-frame-on-display ":0"
                          '((name . "deft")
                            (width . 120)
                            (height . 20)))
   (select-frame-by-name "deft")
   (deft))
   #+END_SRC

** print the current tree to a file
    ;; this function creates an new buffer with just the current tree in
    ;; it.  Next it sets some ps-print settings, and finally saves the
    ;; file as a postscript for printing.

    #+BEGIN_SRC emacs-lisp

      (defun print-narrowed-project ()
        (interactive)
        (org-tree-to-indirect-buffer)
        (set-buffer org-last-indirect-buffer)
        (setq ps-number-of-columns 1)
        (setq ps-landscape-mode nil)
        (setq ps-paper-type 'statement)
        (setq ps-top-margin 63)
        (setq ps-bottom-margin 36)
        (setq ps-left-margin 18)
        (setq ps-right-margin 18)
        (setq ps-zebra-stripes t)
        (setq ps-zebra-stripe-height 1)
        (setq ps-print-header nil)
        (setq ps-print-footer nil)
        (setq ps-print-n-of-n nil)
        (ps-spool-buffer)
        (set-buffer "*PostScript*")
        (write-file (concat "~/paperPlanner/Agenda-Export/" (buffer-name org-last-indirect-buffer) ".ps"))
        )

      (defun print-buffer-as-planner-page ()
        (interactive)
        (setq ps-number-of-columns 1)
        (setq ps-landscape-mode nil)
        (setq ps-paper-type 'statement)
        (setq ps-top-margin 63)
        (setq ps-bottom-margin 36)
        (setq ps-left-margin 18)
        (setq ps-right-margin 18)
        (setq ps-zebra-stripes t)
        (setq ps-zebra-stripe-height 1)
        (setq ps-print-header nil)
        (setq ps-print-footer nil)
        (setq ps-print-n-of-n nil)
        (ps-spool-buffer)
        (set-buffer "*PostScript*")
        (write-file (concat "~/paperPlanner/Agenda-Export/" (buffer-name org-last-indirect-buffer) ".ps"))
        )

    #+END_SRC

** notifications in the window manager for events
   use vlc and notify send
   http://emacs-fu.blogspot.com/2009/11/showing-pop-ups.html

   #+BEGIN_SRC emacs-lisp
     (defun djcb-popup (title msg &optional icon sound)
       "Show a popup if we're on X, or echo it otherwise; TITLE is the title
     of the message, MSG is the context. Optionally, you can provide an ICON and
     a sound to be played"

       (interactive)
       (when sound (shell-command
                    (concat "cvlc --play-and-exit " sound " 2> /dev/null")))
       (if (eq window-system 'x)
           (shell-command (concat "notify-send "
                                  "-t 300000 "
                                  (if icon (concat "-i " icon) "")
                                  " '" title "' '" msg "'"))
         ;; text only version

         (message (concat title ": " msg))))


     (defun djcb-appt-display (min-to-app new-time msg)

       (djcb-popup (format "Appointment in %s minute(s)" min-to-app) msg
                   "/usr/share/icons/Papirus-Dark/48x48/status/task-due.svg"

                   "/usr/share/sounds/freedesktop/stereo/phone-incoming-call.oga"))
     (setq appt-disp-window-function (function djcb-appt-display))

   #+END_SRC

** Show all of the time blocks in grid view
   https://emacs.stackexchange.com/questions/35865/org-agenda-remove-time-grid-lines-that-are-in-an-appointment
   I want free time to be obvious in the grid view.  Meaning, if an appointment goes from 8-10, "block"
   that time in the agenda so that it looks like a time-block...

   #+BEGIN_SRC emacs-lisp

     (defun org-time-to-minutes (time)
       "Convert an HHMM time to minutes"
       (+ (* (/ time 100) 60) (% time 100)))

     (defun org-time-from-minutes (minutes)
       "Convert a number of minutes to an HHMM time"
       (+ (* (/ minutes 60) 100) (% minutes 60)))

     (defadvice org-agenda-add-time-grid-maybe (around mde-org-agenda-grid-tweakify
                                                       (list ndays todayp))
       (if (member 'remove-match (car org-agenda-time-grid))
           (flet ((extract-window
                   (line)
                   (let ((start (get-text-property 1 'time-of-day line))
                         (dur (get-text-property 1 'duration line)))
                     (cond
                      ((and start dur)
                       (cons start
                             (org-time-from-minutes
                              (truncate
                               (+ dur (org-time-to-minutes start))))))
                      (start start)
                      (t nil)))))
             (let* ((windows (delq nil (mapcar 'extract-window list)))
                    (org-agenda-time-grid
                     (list
                      (car org-agenda-time-grid)
                      (remove-if
                       (lambda (time)
                         (find-if (lambda (w)
                                    (if (numberp w)
                                        (equal w time)
                                      (and (>= time (car w))
                                           (< time (cdr w)))))
                                  windows))
                       (cadr org-agenda-time-grid) )
                      (caddr org-agenda-time-grid)
                      (cadddr org-agenda-time-grid)
                      )))
               ad-do-it))
         ad-do-it))
     (ad-activate 'org-agenda-add-time-grid-maybe)
   #+END_SRC

* Move emacs-customs

  #+BEGIN_SRC emacs-lisp
      ;; > Do not write anything past this comment. This is where Emacs will
      ;; > auto-generate custom variable definitions.
      ;; yeah, i know what you said but... i hate the extra cruft in here

    (setq custom-file "~/.spacemacs.d/emacs-customs.el")
    (load custom-file)
#+END_SRC
